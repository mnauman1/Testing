environments:
  - description: Environment used for Manual QA testing
    type: QA
    automated: false
    provision:
      playbook: >-
        https://docs.google.com/document/d/1_nI0ION1xi6SkhCqz0MDUUAJ5pXAcRmZxBa0VUl5RBc/edit#bookmark=id.usnaecby4su0
    endpoints:
      - description: llano environment for QA SE7 manual release testing.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://llano.alertfind.com'
        Login URL: 'https://llano.alertfind.com/login'
        Healthcheck URL: 'https://llano.alertfind.com/af/qos'
        name: Llano QA
      - description: MSDC
        type: http
        credentials: >-
          epadmin, epauser, admin, admin team, admin subteam, leader all
          permissions, leader subteam, regular user
        URL: 'https://kitkat.messageone.com/af'
        name: MSDC
      - description: llano environment for QA SE7 manual release testing - API.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://llano.alertfind.com/soap-api'
        name: Llano API
      - description: llano environment for QA SE7 manual release testing - API- customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://llano.alertfind.com/soap-api/customer'
        name: Llano API - customer end point
      - description: llano environment for QA SE7 manual release testing - API- customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://llano.alertfind.com/soap-api/datamanagement'
        name: Llano API - datamanagement end point
      - description: llano environment for QA SE7 manual release testing - API- customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://llano.alertfind.com/soap-api/notification'
        name: Llano API - notification end point
      - description: llano environment for QA SE7 manual release testing - API
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://llano.alertfind.com/soap-api/incident/v2'
        name: Llano API - incident end point
      - description: llano environment for QA SE7 manual release testing - API- customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://llano.alertfind.com/soap-api/notification/v2'
        name: Llano API - notification end point v2
      - description: llano environment for QA SE7 manual release testing - API- admt
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://llano.alertfind.com/soap-api/admt'
        name: Llano API - admt end point
      - description: plano environment for QA SE7 manual release testing.
        type: http
        credentials: 'admin plano, virendrapatidar bytestacker'
        URL: 'https://llano.alertfind.com'
        Login URL: 'https://llano.alertfind.com/login'
        name: Plano QA
      - description: llano environment for QA SE7 manual release testing.
        type: http
        URL: 'https://llano.alertfind.com'
        Login URL: 'https://llano.alertfind.com/login'
        Healthcheck URL: 'https://llano.alertfind.com/af/qos'
        name: Comal QA
      - description: llano environment for QA SE7 manual release testing.
        type: http
        URL: 'https://llano.alertfind.com'
        Login URL: 'https://llano.alertfind.com/login'
        Healthcheck URL: 'https://llano.alertfind.com/af/qos'
        name: Dniester
      - description: AlertFind Automation Tool UI
        type: http
        credentials: null
        URL: 'http://af-onboarding.aflab.messageone.com:9091/'
        name: AlertFind Automation Tool UI
      - description: Jive Daily Alpha Android build (always install latest one)
        type: http
        credentials: appcenter
        URL: 'https://appcenter.ms/orgs/jive-mobile/apps/Jive-Daily-D-Android-Cloud'
        name: AlertFind Android Mobile application
    name: QA Environment
  - description: Environment used for Automation Testing
    type: QA
    automated: true
    provision:
      playbook: >-
        https://docs.google.com/document/d/1_nI0ION1xi6SkhCqz0MDUUAJ5pXAcRmZxBa0VUl5RBc/edit#bookmark=id.usnaecby4su0
    endpoints:
      - description: >-
          comal environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://comal.alertfind.com'
        Login URL: 'https://comal.alertfind.com/login'
        Healthcheck URL: 'https://comal.alertfind.com/af/qos'
        name: Comal QA
      - description: >-
          comal environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://comal.alertfind.com'
        Login URL: 'https://comal.alertfind.com/login'
        Healthcheck URL: 'https://comal.alertfind.com/af/qos'
        name: Llano QA
      - description: >-
          comal environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://comal.alertfind.com'
        Login URL: 'https://comal.alertfind.com/login'
        Healthcheck URL: 'https://comal.alertfind.com/af/qos'
        name: Plano QA
      - description: MSDC
        type: http
        credentials: >-
          epadmin, epauser, admin, admin team, admin subteam, leader all
          permissions, leader subteam, regular user
        URL: 'https://kitkat.messageone.com/af'
        name: MSDC
      - description: llano environment for QA SE7 manual release testing - API.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://comal.alertfind.com/soap-api'
        name: Llano API
      - description: llano environment for QA SE7 manual release testing - API- customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://comal.alertfind.com/soap-api/customer'
        name: Llano API - customer end point
      - description: llano environment for QA SE7 manual release testing - API- customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://comal.alertfind.com/soap-api/datamanagement'
        name: Llano API - datamanagement end point
      - description: llano environment for QA SE7 manual release testing - API- customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://comal.alertfind.com/soap-api/notification'
        name: Llano API - notification end point
      - description: llano environment for QA SE7 manual release testing - API
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://comal.alertfind.com/soap-api/incident/v2'
        name: Llano API - incident end point
      - description: llano environment for QA SE7 manual release testing - API- customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://comal.alertfind.com/soap-api/notification/v2'
        name: Llano API - notification end point v2
      - description: llano environment for QA SE7 manual release testing - API- admt
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://comal.alertfind.com/soap-api/admt'
        name: Llano API - admt end point
      - description: >-
          comal environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://comal.alertfind.com'
        Login URL: 'https://comal.alertfind.com/login'
        Healthcheck URL: 'https://comal.alertfind.com/af/qos'
        name: Dniester
      - description: AlertFind Automation Tool UI
        type: http
        credentials: null
        URL: 'http://af-onboarding.aflab.messageone.com:9091/'
        name: AlertFind Automation Tool UI
      - description: Jive Daily Alpha Android build (always install latest one)
        type: http
        credentials: appcenter
        URL: 'https://appcenter.ms/orgs/jive-mobile/apps/Jive-Daily-D-Android-Cloud'
        name: AlertFind Android Mobile application
    name: Automation Environment
  - description: Environment used for Automation Testing
    type: Dev
    automated: false
    provision:
      playbook: >-
        https://docs.google.com/document/d/1_nI0ION1xi6SkhCqz0MDUUAJ5pXAcRmZxBa0VUl5RBc/edit#bookmark=id.usnaecby4su0
    endpoints:
      - description: >-
          Dniester environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://dniester.alertfind.com'
        Login URL: 'https://dniester.alertfind.com/login'
        Healthcheck URL: 'https://dniester.alertfind.com/af/qos'
        name: Comal QA
      - description: >-
          Dniester environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://dniester.alertfind.com'
        Login URL: 'https://dniester.alertfind.com/login'
        Healthcheck URL: 'https://dniester.alertfind.com/af/qos'
        name: Llano QA
      - description: >-
          Dniester environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://dniester.alertfind.com'
        Login URL: 'https://dniester.alertfind.com/login'
        Healthcheck URL: 'https://dniester.alertfind.com/af/qos'
        name: Plano QA
      - description: MSDC
        type: http
        credentials: >-
          epadmin, epauser, admin, admin team, admin subteam, leader all
          permissions, leader subteam, regular user
        URL: 'https://kitkat.messageone.com/af'
        name: MSDC
      - description: Dniester environment for QA SE7 manual release testing - API.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://dniester.alertfind.com/soap-api'
        name: Llano API
      - description: >-
          Dniester environment for QA SE7 manual release testing - API-
          customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://dniester.alertfind.com/soap-api/customer'
        name: Llano API - customer end point
      - description: >-
          Dniester environment for QA SE7 manual release testing - API-
          customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://dniester.alertfind.com/soap-api/datamanagement'
        name: Llano API - datamanagement end point
      - description: >-
          Dniester environment for QA SE7 manual release testing - API-
          customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://dniester.alertfind.com/soap-api/notification'
        name: Llano API - notification end point
      - description: Dniester environment for QA SE7 manual release testing - API
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://dniester.alertfind.com/soap-api/incident/v2'
        name: Llano API - incident end point
      - description: >-
          Dniester environment for QA SE7 manual release testing - API-
          customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://dniester.alertfind.com/soap-api/notification/v2'
        name: Llano API - notification end point v2
      - description: Dniester environment for QA SE7 manual release testing - API- admt
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://dniester.alertfind.com/soap-api/admt'
        name: Llano API - admt end point
      - description: Dniester environment for developer or any POC
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://dniester.alertfind.com/'
        Login URL: 'https://dniester.alertfind.com/login'
        Healthcheck URL: 'https://dniester.alertfind.com/af/qos'
        name: Dniester
      - description: AlertFind Automation Tool UI
        type: http
        credentials: null
        URL: 'http://af-onboarding.aflab.messageone.com:9091/'
        name: AlertFind Automation Tool UI
      - description: Jive Daily Alpha Android build (always install latest one)
        type: http
        credentials: appcenter
        URL: 'https://appcenter.ms/orgs/jive-mobile/apps/Jive-Daily-D-Android-Cloud'
        name: AlertFind Android Mobile application
    name: Development Environment
  - description: Environment used for Local testing
    type: Dev
    automated: false
    provision:
      playbook: >-
        https://docs.google.com/document/d/1_nI0ION1xi6SkhCqz0MDUUAJ5pXAcRmZxBa0VUl5RBc/edit#bookmark=id.usnaecby4su0
    endpoints:
      - description: MSDC
        type: http
        credentials: >-
          epadmin, epauser, admin, admin team, admin subteam, leader all
          permissions, leader subteam, regular user
        URL: 'https://kitkat.messageone.com/af'
        name: MSDC
      - description: local environment for QA SE7 manual release testing.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'http://192.168.56.101:4000/login'
        Login URL: 'http://localhost:4000/login'
        Healthcheck URL: >-
          https://llano.alertfind.com/loginhttps://alertfind-appserver-m1alertfind-qa.pub.devhub.k8.devfactory.com/af/qos
        name: Llano QA
      - description: >-
          Dniester environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'http://192.168.56.101:4000'
        Login URL: 'https://localhost:4000/login'
        Healthcheck URL: 'https://localhost:4000/af/qos'
        name: Comal QA
      - description: >-
          Dniester environment for SE7 Automation release testing and nightly
          build.
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'https://192.168.1.101:4000'
        Login URL: 'https://localhost:4000/login'
        Healthcheck URL: 'https://localhost:4000/af/qos'
        name: Plano QA
      - description: Dniester environment for QA SE7 manual release testing - API.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://localhost:4000/soap-api'
        name: Llano API
      - description: >-
          Dniester environment for QA SE7 manual release testing - API-
          customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://localhost:4000/soap-api/customer'
        name: Llano API - customer end point
      - description: >-
          Dniester environment for QA SE7 manual release testing - API-
          customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://localhost:4000/soap-api/datamanagement'
        name: Llano API - datamanagement end point
      - description: >-
          Dniester environment for QA SE7 manual release testing - API-
          customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://localhost:4000/soap-api/notification'
        name: Llano API - notification end point
      - description: Dniester environment for QA SE7 manual release testing - API
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://localhost:4000/soap-api/incident/v2'
        name: Llano API - incident end point
      - description: >-
          Dniester environment for QA SE7 manual release testing - API-
          customer.
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://localhost:4000/soap-api/notification/v2'
        name: Llano API - notification end point v2
      - description: Dniester environment for QA SE7 manual release testing - API- admt
        type: http
        credentials: 'eparoot soapapitest, admin soapapitest'
        URL: 'https://localhost:4000/soap-api/admt'
        name: Llano API - admt end point
      - description: Dniester environment for developer or any POC
        type: http
        credentials: >-
          cmcroot, eparoot, epadmin, epauser, admin, admin team, admin subteam,
          leader all permissions, leader subteam, regular user
        URL: 'http://192.168.56.101:4000/'
        Login URL: 'https://localhost:4000/login'
        Healthcheck URL: 'https://localhost:4000/af/qos'
        name: Dniester
      - description: AlertFind Automation Tool UI
        type: http
        credentials: null
        URL: 'http://af-onboarding.aflab.messageone.com:9091/'
        name: AlertFind Automation Tool UI
      - description: Jive Daily Alpha Android build (always install latest one)
        type: http
        credentials: appcenter
        URL: 'https://appcenter.ms/orgs/jive-mobile/apps/Jive-Daily-D-Android-Cloud'
        name: AlertFind Android Mobile application
    variables:
      <customer-domain>: thu-customer
      sms-code: 545664
      QA Own Email: tingung.hu@aurea.com
    credentials:
      - type: basic
        username: adminuser1@thu.com
        password: '!hailst0rm'
        id: admin
      - type: basic
        username: admin@reserved-for-customer-details-test.com
        password: password
        id: adminuser1
      - type: basic
        username: adminuser1@easier-power-customer.com
        password: '!hailst0rm'
        id: admin bytestacker
    name: Local Environment
credentials:
  - type: basic
    username: cmcroot
    password: '!cmcR00T'
    id: cmcroot
  - type: basic
    username: eparoot
    password: '!epaR00T'
    id: eparoot
  - type: basic
    username: epadmin
    password: '!epa@DMIN'
    id: epadmin
  - type: basic
    username: epauser
    password: '!epaUSER'
    id: epauser
  - type: basic
    username: adminuser1@<customer-domain>
    password: '!hailst0rm'
    id: admin
  - type: basic
    username: adminuser1@bytestacker.com
    password: '!hailst0rm'
    id: virendrapatidar bytestacker
  - type: basic
    username: adminuser1@bytestacker.com
    password: '!hailst0rm'
    id: admin bytestacker
  - type: basic
    username: adminuser1@<customer-domain>
    password: '!hailst0rm'
    id: admin team
  - type: basic
    username: adminuser1-subteam1-team1@<customer-domain>
    password: '!hailst0rm-subteam1-team1'
    id: admin subteam
  - type: basic
    username: leader-all-permission-team1@<customer-domain>
    password: '!leader-all-permission-team1'
    id: leader all permissions
  - type: basic
    username: leader-manage-access-team1@bytestacker.com
    password: '!leader-manage-access-team1'
    id: leader-manage-access-team1
  - type: basic
    username: leader-team1-subteam1@<customer-domain>
    password: '!leader-team1-subteam1'
    id: leader subteam
  - type: basic
    username: regularuser1@bytestacker.com
    password: '!regularuser1'
    id: regular user
  - type: basic
    username: eparoot
    password: '{MD5}H0uL5eiOfOXPTMm7pRPzWg=='
    id: eparoot soapapitest
  - type: token
    token: Basic ZXBhcm9vdDp7TUQ1fW9PNk1MbVJoOExzVGtUbTZldm14VlE9PQ==
    id: eparoot soapapitest token
  - type: basic
    username: admin@soapapitest.com
    password: '!hailst0rm'
    id: admin soapapitest
  - type: basic
    username: global
    password: global
    id: appcenter
variables:
  <customer-domain>: >-
    bytestacker.com // This is sample value but as per
    https://docs.google.com/document/d/1_nI0ION1xi6SkhCqz0MDUUAJ5pXAcRmZxBa0VUl5RBc/edit#bookmark=id.usnaecby4su0
    each QA will create customer with their name/initials as domain name
  customer-domain: bytestacker.com
  hotline-number: 16789994583
  QA Own Phone Number: >-
    your own phone number. The number must including country code. Example is
    Malaysia number will be 60168081144
  QA Own Email: your own email address.
  alert-find-sender-email: llano-alertfind@llano.aflab1.aflab.messageone.com
  sms-code: authentication pass-word received by QA through SMS when login
  autoadmtcustomer_map: 'https://e2efiles.s3.amazonaws.com/saxecyo.map'
  auto-admt-customer_zip: 'https://e2efiles.s3.amazonaws.com/a1f1hjl.zip'
  wrong-auto-admt-customer_zip: 'https://e2efiles.s3.amazonaws.com/wrong-auto-admt-customer.zip'
  wrong-auto-admt-customer_map: 'https://e2efiles.s3.amazonaws.com/wrong-auto-admt-customer.map'
  Setup Step One: Setup \(Step 1 of 8\)
  Setup Step Two: Standard Devices \(Step 2 of 8\)
  Setup Step Three: Default Personal Escalations \(Step 3 of 8\)
  Setup Step Four: Users \(Step 4 of 8\)
  Setup Step Five: Groups \(Step 5 of 8\)
  Setup Step Six: Teams \(Step 6 of 8\)
  Setup Step Seven: Sites \(Step 7 of 8\)
  Setup Step Eight: Confirm \(Step 8 of 8\)
  RegexToNotificationConfirmationLink: '(.*href=")(https:[\s\S]*)(">this link[\s\S]*)'
  RegexToResultLogTime: '[a-zA-Z]+ \d+, \d+, \d+:\d+:([1-6][0-9]|[0-6][1-9]) (AM|PM)'
  user starts with R regex: '^[r|R].*'
  user starts with L regex: '^[l|L].*'
  user starts with any character regex: '^[a-zA-Z].*'
  names start with a or A: '^[a|A].*'
  names start with b or B: '^[b|B].*'
  names start with c or C: '^[c|C].*'
  names start with e or E: '^[e|E].*'
  names start with s or S: '^[s|S].*'
  names starts with any character: '^[a-zA-Z].*'
  names starts with any character different than 'a': '^[^a^A].*'
  names starts with any character different than 'c': '^[^c^C].*'
  names starts with t or T: '^[t|T].*'
  email-admin-email: general.automation+emailadmin@aurea.com
  email-body-with-attachment: There are additional attachments for this message available through
  amharic-language-message: ይህ ከኡይ የሙከራ መልእክት ብቻ ነው። ይህ በጭራሽ እውነተኛ ድንገተኛ አይደለም-ይህ ስልጠና ብቻ ነው ፡፡
selectors:
  - selectors:
      Ok: '//span[text()=" Ok "]'
      Save: '(//span[text()=" Save "])[1]'
      Add: '//span[text()=" Add "]'
      Delete: '//span[contains(text(),"Delete")]'
      'Yes': '//span[contains(text(),"Yes")]'
      Toast Message: '//*[@class="df-toast__body"]'
      Success toast message - result sent: '//div[@class=''df-toast__body'']//p[contains(text(),''Result will be sent to configured/provided email address(es).'') or contains(text(),''result will be sent to configured/provided email address(es).'')]'
      Send: '//span[contains(text(),''Send'')]'
      Modal Title: '//h5[@class="modal-title"]'
      Close Modal: '//a[@class=''modal-link'']'
      OK: '//*[contains(text(),''OK'')]'
      OK button: '//button[normalize-space(.)=''OK''][not(@disabled)]'
      Ok button: '//button[normalize-space(.)=''Ok''][not(@disabled)]'
      Edit button: '//button[normalize-space(.)=''Edit''][not(@disabled)]'
      Save button: '//button[normalize-space(.)=''Save''][not(@disabled)]'
      Save button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='Save'][not(@disabled)]
      Ok button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='Ok'][not(@disabled)]
      OK button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='OK'][not(@disabled)]
      Add button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='Add'][not(@disabled)]
      Delete button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='Delete'][not(@disabled)]
      Yes button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='Yes'][not(@disabled)]
      Send button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='Send'][not(@disabled)]
      Cancel button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='Cancel'][not(@disabled)]
      Close button in a Dialog: >-
        //div[@class='modal-content']//button[normalize-space(.)='Close'][not(@disabled)]
      Dropdown Item: '//df-option//div[text()=$Caption]'
      x (in Toast Message): '//div[contains(@class,''df-toast__close'')]//span[text()=''x'']'
      Impersonating Info: '//div[span[contains(text(),''Impersonating'')]]/span[2][@title]'
      Team dropdown in the header:
        type: dropdown
        open: >-
          //df-select[@name='teamListDropdown']//div[@class='df-select__input-text']/div[contains(@class,'text-truncate')]
        value: '//df-option/div[.=''{value}'']'
      team2 option in Team dropdown: '//df-option/div[text()=''team2'']'
      subteam1-team1 option in Team dropdown: '//df-option/div[text()=''subteam1-team1'']'
      Active breadcrumb: '//div[@class=''breadcrumbs'']//span/a[contains(@class,''active'')]'
      Grid pagination tocal records: '//div[contains(@class,''df-table-paginator__options__total'')]/span'
      Loading container: '//div[@class=''df-loader__container'']'
      Loading spinner: '//*[@class=''df-loading-spinner'']'
      Next Page button in pagination: >-
        //button[contains(@class,'paginator')][./i[contains(@class,'caret-right')]]
      Previous Page button in pagination: >-
        //button[contains(@class,'paginator')][./i[contains(@class,'caret-left')]]
      Items per page dropdown:
        type: dropdown
        open: >-
          //div[@class='df-table-paginator__options__select' and
          span[contains(text(),'Items per page')]]/df-select
        value: '//df-option/div[.=''{value}'']'
      Page textbox: '//input[contains(@class,''df-table-paginator__options__pages__input'')]'
      1 criteria: '//span[contains(text(),''1 criteria'')]'
      total number of pages: '//df-table-paginator//span[contains(.,'' of '')]'
      Team Dropdown: '//df-select[@name="teamListDropdown"]'
      Options from Team Dropdown: '//div[contains(@class,''df-select__options-list'')]/df-option'
      You do not have permission message: >-
        //p[contains(text(),'You do not have permission to perform this action.
        Please contact your AlertFind administrator for more details')]
      Error message: >-
        //p[contains(text(),'The credentials you provided cannot be
        determined')]
      session timeout error: '//p[contains(text(),''Your session has expired'')]'
      Any row in table: //tbody/tr
      Confirmation popup OK button: '//df-alert//button/span[text()=" OK "]'
      Close Button in Error Popup: '//span[contains(text(),''x'')]'
      Disabled Status Checkbox: '//div[@id=''radio-outer-df-radio-2'']'
      Others in Country Option: '//div[@class=''df-radio-input__text'' and contains(text(),''Others'')]'
      List container: '//df-card[contains(@class,''list-container'')]'
      Bottom paginator: '//df-table-paginator[contains(@class,''df-table-paginator'')]'
      Refresh button: '(//button[contains(.,''Refresh'')])[1]'
      User logged in: '//df-user-profile//div[contains(text(),''Welcome,'')]'
      General - Loading Spinner: //df-loading-spinner
    name: General
  - selectors:
      Login - Username: '//input[@name="username"]'
      Login - Password: '//input[@name="password"]'
      Login: '//button[@type="submit"]//span'
      Login - SMS Code: '//input[@name="authcode"]'
      User Profile Drop down: '//div[contains(@class,''df-user-profile'')]'
      Logout: '//button[contains(text(),''Log Out'')]//i'
      Forgot Password: '//a[contains(@href,''forgot-password'')]'
      Reset Password Message: '//div[@class="box__body"]'
      New Password: '//input[@name="password"]'
      Confirm Password: '//input[@name="confirmPassword"]'
      Type to search: '//*[@id="search"]'
      Login Username: '//input[@name="username"]'
      Password: '//input[@name="password"]'
      User Profile Dropdown: '//div[@class=''d-inline-block'']/div'
      Valid username is required: >-
        //span[contains(@class,'df-input__error-message')][normalize-space(.)='Valid
        username is required']
      Valid password is required: >-
        //span[contains(@class,'df-input__error-message')][normalize-space(.)='Valid
        password is required']
      The credentials you provided cannot be determined to be authentic: >-
        //div[contains(@class,'df-toast')]/p[normalize-space(.)='The credentials
        you provided cannot be determined to be authentic.']
      Send button in the Forgot Password dialog: '//button[normalize-space(.)=''Send'']'
      Save button in the Change Password dialog: '//button[normalize-space(.)=''Save'']'
      Change Password dialog title: >-
        //h5[@class='modal-title'][contains(normalize-space(.),'Change Password
        for')]
      Change Password Toast Message: '//h1[normalize-space(.)=''Error!'']/following-sibling::p'
      Password textbox in the Change Password dialog: '//input[@name=''password'']'
      Confirm Password textbox in the Change Password dialog: '//input[@name=''confirmPassword'']'
    name: Login/Logout Page
  - selectors:
      Alerfind Data Centre dropdown:
        type: dropdown
        open: '//select[@name=''afdc'']'
        value: '//select[@name=''afdc'']/option[normalize-space(.)=''{value}'']'
      '''comal'' option of the Alerfind Data Centre dropdown': '//select[@name=''afdc'']/option[normalize-space(.)=''comal'']'
      '''dniester'' option of the Alerfind Data Centre dropdown': '//select[@name=''afdc'']/option[normalize-space(.)=''dniester'']'
      Unique alpha code for QA's textbox: '//*[@name=''code'']'
      QA's Work Email textbox: '//*[@name=''workEmail'']'
      QA's Cell Phone with country code (without plus) textbox: '//*[@name=''cellPhone'']'
      QA's Personal Email textbox: '//*[@name=''personalEmail'']'
      Unique alpha code for QA's textbox's tooltip: ''
      QA's Work Email textbox's tooltip: ''
      QA's Cell Phone with country code (without plus) textbox's tooltip: ''
      QA's Personal Email textbox's tooltip: ''
      Alertfind Successful Onboarding message: '//span[@id=''message'']'
    name: AlertFind Automation Tool UI - Login page
  - selectors:
      Support - Type to search: '//*[@id="search"]'
      Support - Customers: '//a[contains(text(),"Customers")]'
      Customers: '//a[contains(text(),"Customers")]'
      Support - Search: '//button[contains(@class, "search-btn")]'
      Auto Admt Customer record: '(//td[@aria-label="Name"][contains(text(),''Auto Admt Customer'')])[1]'
      Customer Record: '//td[@aria-label=''Name''][normalize-space(text())=$CustomerName]'
      Last Customer Record: '(//td[@aria-label="Name"][contains(text(),$CustomerName)])[last()]'
      Support - Impersonate: '//button[contains(text(),"Impersonate")]'
      customer created: '//td[@data-header="Name"]'
      Support - View: '//button[contains(text(),"View")]'
    name: Support Main Page
  - selectors:
      Error notification popup: '//df-toast-container[.//h1[contains(.,''Error!'')]]'
    name: Toast Message
  - selectors:
      SmartContact page header: '//h1[@class=''section__header p-3 pl-4'']'
      Begin Configuration (in SmartContact page): >-
        //span[@class='df-button__content' and contains(text(),'Begin
        Configuration')]
      Configuration (in SmartContact page): '//span[@class=''df-button__content'' and contains(text(),''Configuration'')]'
      Health Monitor button (in SmartContact page): '//span[contains(text(),''Health Monitor'')]'
      From textbox (in SmartContact Configuration Page): '//input[@name=''smartContactFromEmail'']'
      Cell Phone slider (in SmartContact Configuration Page): >-
        //df-slide-toggle[@name='SmartContact_Phone']//div[@class='df-slide-toggle__bar']
      Bump One slider icon (in SmartContact Configuration Page): '//df-slider[@name=''bumpOneDays'']//div[@id=''df-slider__input-thumb'']'
      Bump One slider start (in SmartContact Configuration Page): '//df-slider[@name=''bumpOneDays'']'
      Bump start day (in SmartContact Configuration Page): >-
        //div[@class="card_range clearfix" and
        div[h2[contains(text(),$BumpName)]]]//span[@class="change_data
        min_unit"]/i[@class="put_unit"]
      Turn On button (in SmartContact Configuration Page): '//span[contains(text(),''Turn On'')]'
      Export button (in Number Of People in each bump stage section): >-
        //div[@class='col-sm-12
        chart_cell']//span[@class='df-button__content'][contains(text(),'Export
        Report')]
      Organization Health-Check section (in Monitor page): '//h3[contains(text(),''Health-Check'')]'
      Organization Health-Check chart (in Monitor page): '//df-donut[@class=''df-donut'']//*[local-name()=''svg'']'
      Organization Health-check Break-down section (in Monitor page): '//h3[contains(text(),''Health-check Break-down'')]'
      Organization Health-check Break-down chart (in Monitor page): '//df-bar[@class=''df-bar'']//*[local-name()=''svg'']'
      Number Of People in each bump stage section (in Monitor page): '//h3[contains(text(),''In each bump stage'')]'
      Number Of People in each bump stage chart (in Monitor page): '//df-funnel[@class=''funnel-chart df-funnel'']//*[local-name()=''svg'']'
      Vertical Percentage One Hunderd (in Organization Health-check Break-down section): '//df-bar[@class=''df-bar'' and @yaxishighlight="100"]'
      Cell Phone Base value (Orange color): >-
        //df-bar[@class='df-bar']//*[local-name()='svg']//*[name()='g' and
        contains(@transform,'translate(')]//*[name()='g' and
        contains(@class,'df-bar__in')]//*[name()='g' and
        contains(@class,'df-bar-wra')]//*[name()='g'][1]/*[name()='rect' and
        @fill="#ff6600"]
      Cell Phone Current Value (Yellow color): >-
        //df-bar[@class='df-bar']//*[local-name()='svg']//*[name()='g' and
        contains(@transform,'translate(')]//*[name()='g' and
        contains(@class,'df-bar__in')]//*[name()='g' and
        contains(@class,'df-bar-wra')]//*[name()='g'][2]/*[name()='rect' and
        @fill="#fcd202"]
    name: SmartContact Page
  - selectors:
      Customer Header: '//h1[contains(@class,''section__header'')][.=''Customer '']'
      Customer List Breadcrumb: '//a[text()='' Customer list '']'
      Add new customer Button: '//button[span[contains(text(),''Add new customer'')]]'
      Customer Field (in New Customer): '//input[@name=''customerName'']'
      From Email Address Field (in New Customer): '//input[@name=''email'']'
      Domain Field (in New Customer): '//input[@name=''domain'']'
      Domain List is not empty: '//select[@name=''domainName'']/option'
      Add Button (in Domains To Include): '//af-customer-domain-settings//button[span[contains(text(),''Add'')]]'
      Allow customer to enable SmartContact (in New Customer): >-
        //df-checkbox[@name='smartContactEnabled']//span[@class='df-checkbox__icon']
      Hotline Access Checkbox (In New Customer): >-
        //button[.//span[contains(text(),'Allow Hotline access
        to')]]//input[@type='checkbox']
      Label Field (in Hotline Access): '//input[@name=''hotlineLabel'']'
      Voice Dropdown (in Hotline Access):
        type: dropdown
        open: '//df-select[@name=''voiceDefaultValue'']'
        value: '//df-option[ .//text()=''{value}'']'
      Available Hotline Numbers Dropdown (in Hotline Access):
        type: dropdown
        open: '//df-select[@name=''numberToAdd'']'
        value: '//df-option[ .//text()=''{value}'']'
      Add Button (in Hotline Access): >-
        //*[contains(@class,'hotline-numbers-table')]//button[span[contains(text(),'Add')]]
      Set as default hotline number Checkbox (in Hotline Access): >-
        //div[@class='form-group' and .//label[text()='Set as default hotline
        number']]//button[contains(@class,'checkbox')]
      Customer System Name (In New Customer): '//input[@name=''customerSystemName'']'
      Voice Customer System Name (In New Customer): '//input[@name=''voiceCustomerSystemName'']'
      Voice checkbox (in Authorized Voice(S) section): '//button[.//span[contains(text(),$DefaultVoice)]]'
      Kate/English (United States) Checkbox (Authorized Voice(S)): >-
        //button[.//span[contains(text(),'Kate/English (United
        States)')]]//input[@type='checkbox']
      Daniel/English (United States) Checkbox (Authorized Voice(S)): >-
        //button[.//span[contains(text(),'Daniel/English (United
        Kingdom)')]]//input[@type='checkbox']
      Daniel/English (United Kingdom) Checkbox (Authorized Voice(S)): >-
        //button[.//span[contains(text(),'Daniel/English (United
        Kingdom)')]]//input[@type='checkbox']
      Donna/English (United States) Checkbox (Authorized Voice(S)): >-
        //button[.//span[contains(text(),'Donna/English (United
        States)')]]//input[@type='checkbox']
      llano working hotline Entry: '//td[text()=''llano working hotline'']'
      Hotline Pro (in New Customer): '//button[.//span[contains(text(),''Enable Hotline Pro'')]]'
      Save (in New Customer): '//button[.//span[.='' Save '']]'
      Type to Search text box: '//input[@id=''search'']'
      Search button: '//i[@class=''fa fa-search'']'
      Type to Search text box for Step 2: (//input[@id='search'])[2]
      Search button for Step 2: (//i[@class='fa fa-search'])[2]
      customer appears in the customer list: '//td[contains(text(),''adminuser1'')]'
      Impersonate button against the customer: '(//button[@class=''btn btn-sm btn-white ng-star-inserted''])[1]'
      Team list page: '//a[contains(text(),'' Team list '')]'
      Auto Admt Customer custom page: '//a[contains(text(),'' Team list '')]'
      New Customer screen: '//a[contains(@class,''df-breadcrumbs__link--active'')]'
      Partner Brand dropdown:
        type: dropdown
        open: '//df-select[@name=''partnerBrand'']'
        value: '//df-option[contains(normalize-space(.),{value})]'
      Partner brand Dropdown:
        type: dropdown
        open: '//df-select[@name=''partnerBrand'']'
        value: '//df-option[ .//text()=''{value}'']'
      Default Voice Dropdown:
        type: dropdown
        open: '//df-select[@name=''defaultVoice'']'
        value: '//df-option[ .//text()=''{value}'']'
      Bytestacker customer: '//td[contains(text(),''Bytestacker'')]'
      New Customer customer: '//td[contains(text(),''New Customer'')]'
      Impersonate Customer by Name: >-
        (//td[contains(text(),$CustomerName)]/following::button[contains(text(),"Impersonate")])[1]
      Impersonate button next to CustomerName customer: >-
        (//td[contains(text(),$CustomerName)]/following::button[contains(text(),"Impersonate")])[1]
      Customers List in Customer Page: '//table[@df-table=''table'' and contains(@class,''df-table'')]'
      Type Column in Customer Page: '//th[contains(text(),''Type'')]'
      Status Column in Customer Page: '//th[contains(text(),''Status'')]'
      Status Column with values other than Enabled and Disabled: >-
        //tr[@class='ng-star-inserted']/td[@data-header='Status'][not(contains(text(),'enabled'))
        and not(contains(text(),'disabled'))]
      Type Column with values other than Api and Premium: >-
        //tr[@class='ng-star-inserted']/td[@data-header='Type'][not(contains(text(),'API'))
        and not(contains(text(),'Premium'))]
      Run Report button for Customer Overview Report: >-
        //df-card-title[contains(text(),'Customer
        Overview')]/following-sibling::button
      Customer Overview Report template: '//div[contains(text(),''Customer Overview'')]'
      Run Report screen: >-
        //span[2][@class="df-breadcrumbs__links-container--visible
        df-breadcrumbs__links-container df-breadcrumbs__links-container-desktop
        ng-star-inserted"]
      Popup with message- Success! This report has been added to 'My Reports': '//p[contains(text(),''This report has been added to "My Reports"'')]'
      Refresh Button on Top of New Page: '//i[@class=''fa fa-refresh'' and @xpath=''1'']'
      Newly Added Report (ReportName) in 'My Reports' Tab: '//td[contains(text(),$ReportName)]'
      Name of Report Type at Top of the List: '//tbody/tr[2]/td[3]'
      Needs Usage Policy Review (in New Customer): '//*[label[text()=''Needs Usage Policy Review'']]//df-checkbox'
      Admin Alerting Console (in New Customer): '//*[label[text()=''Admin Alerting Console'']]//df-checkbox'
      Team Leader Alerting Console (in New Customer): '//*[label[text()=''Team Leader Alerting Console'']]//df-checkbox'
      Map Based (in New Customer): '//*[label[text()=''Map Based'']]//df-checkbox'
      Mobile Alerting (in New Customer): '//*[label[text()=''Mobile Alerting'']]//df-checkbox'
      Confirmation Options (in New Customer): '//*[label[text()=''Confirmation Options'']]//df-checkbox'
      Multiple Notifications (in New Customer): '//*[label[text()=''Multiple Notifications'']]//df-checkbox'
      Customer Account (in New Customer): '//*[label[text()=''Customer Account'']]//df-checkbox'
      Customer PIN Authentication (in New Customer): '//*[label[text()=''Customer PIN Authentication'']]//df-checkbox'
      Customer PIN Authentication Note (in New Customer): '//*[label[text()=''Customer PIN Authentication Note'']]//textarea'
      Web Reporting (in New Customer): '//*[label[text()=''Web Reporting'']]//df-checkbox'
      Allow customer to use Skype for Business Devices (in New Customer): >-
        //df-checkbox[*[*[span[text()=' Allow customer to use Skype for Business
        Devices ']]]]
      Third Party Script Content (in New Customer): '//*[label[text()=''Third Party Script Content'']]//textarea'
      Delete Notifications after checkbox (in New Customer): '//df-checkbox[@name=''retentionAllowDelete'']'
      Delete Notifications after textbox (in New Customer): '//input[@name=''retentionDeletePeriod'']'
      Tom/English (United States): >-
        //button[.//span[contains(text(),'Tom/English (United
        States)')]]//input[@type='checkbox']
    name: Customers Page
  - selectors:
      Smart Groups: >-
        //a[@href="/user-dashboard/groups/smart"] [contains(text(),"Smart
        Groups")]
      New: '//span[contains(text(),"New")]'
      New in Criteria Filters panel: '//span[contains(text(),"New")]'
      Group Name: '//input[@name="groupName"]'
      Edit Criteria: '//button[contains(text(),"Edit Criteria")]'
      New Criteria: '(//af-user-filter-criteria//button[normalize-space(.)=''New''])[1]'
      New Criteria Pop Up: '//h5[normalize-space(.)=''new Criteria'']'
      Group Name Display: '//div[@id="details-panel"]//div[2]//div'
      Field Name: '//df-select[@name=''criteriaName'']'
      Field Name Drop Down:
        type: dropdown
        open: '//df-select[@name=''criteriaName'']'
        value: '//df-option//div[text()=''{value}'']'
      Value: '//input[@name="value"]'
      UserName: '//input[@aria-label="UserName"]'
      SmartGroup1: '//td[contains(text(),"SmartGroup1")]'
      Edit Group Button: '//span[contains(text(),''Edit Group'')]'
      Group Description Field: '//input[@name=''groupDesc'']'
      Operator Dropdown:
        type: dropdown
        open: '//df-select[@name=''operator'']'
        value: '//df-option//div[text()=''{value}'']'
      Value Dropdown:
        type: dropdown
        open: '//df-select[@name=''combo'']'
        value: '//df-option//div[text()=''{value}'']'
      Last option in list: '//df-option[last()]/div'
      Values options: //df-option/div
      Group Description Value: >-
        (//label[contains(text(),'Group Name')]//following::div[@class='col
        item-value'])[2]
      Smart Groups list: '//h1[contains(text(),''Smart Groups'')]'
      No Groups Found (in table): '//div[normalize-space(text())=''No Groups Found'']'
      Name column: '//td[1]'
      A letter in Alphabet: '//span[(text()='' A '')]'
      B letter in Alphabet: '//span[(text()='' B '')]'
      E letter in Alphabet: '//span[(text()='' E '')]'
      S letter in Alphabet: '//span[(text()='' S '')]'
      New Button on Smart Groups Page: '//span[contains(text(),"New")]'
      New Button on Criteria Editor Popup: '(//div[@class="modal-content"]//span[contains(text(),"New")])[1]'
      Criteria Editor Pop Up: '//h5[text()=''Criteria Editor'']'
      Save Button on Edit Criteria Pop Up: '(//span[contains(text(),''Save'')])[last()]'
      Filter options input: '//input[@placeholder="Filter options"]'
      First criterion in Criteria Filters: '(//table//af-filter-criterion-view)[1]'
      Delete button (Enabled in Criteria Filters): >-
        //df-card[contains(.,'Criteria
        Filters')]//button[contains(.,'Delete')][not(@disabled)]
    name: Groups Page
  - selectors:
      Application Settings: '//a[contains(text(),"Application Settings")]'
      My Account link: '//a[contains(text(),"My Account")]'
      My Account page: '//h1[contains(text(),''My Account'')]'
      Application Status link: '//a[contains(text(),"Application Status")]'
      Customer Status page: '//h1[contains(text(),''Customer Status'')]'
      Web Services link: '//a[contains(text(),"Web Services")]'
      Web Services Console page: '//h1[contains(text(),''Web Services Console'')]'
      the 'Launch Center' (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[normalize-space(text())='Launch
        Center']
      the 'Alert Console' link (in Left Menu): '//div[contains(@class,''sidebar'')]//a[contains(text(),''Alert Console'')]'
      the 'Notifications' (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[normalize-space(text())='Notifications']
      the 'Incidents' link (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[@href='/user-dashboard/incidents'][normalize-space(text())='Incidents']
      the 'Hotlines' link (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[@href='/user-dashboard/hotline'][normalize-space(text())='Hotlines']
      the 'Groups' link (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[normalize-space(text())='Groups']
      the 'Assets' link (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[normalize-space(text())='Assets']
      the 'Reporting' link (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[normalize-space(text())='Reporting']
      the 'Administration' link (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[normalize-space(text())='Administration']
      the 'Notification Templates' link (in Left Menu): >-
        //div[contains(@class,'df-sidebar__item-container')]/a[normalize-space(text())='Notification
        Templates']
      SmartContact link (in Left Menu): '//a[contains(text(),''SmartContact'')]'
      Teams in Left Menu: >-
        //df-sidebar-item[div[a[contains(text(),'Administration')]]]//a[contains(text(),'Teams')]
      Manage Library in Left Menu: '//a[contains(text(),''Manage Library'')]'
      Configure in Data Management Settings section: '//button[contains(text(),"Configure")]'
      the 'Import' button in 'Data Management Settings' section: '//button[contains(text(),"Import")]'
      Data Management Settings: null
      Upload: '//span[contains(text(),"Upload")]'
      Upload (Enabled): '//button[not(@disabled='''')]//span[contains(text(),"Upload")]'
      Toast Message: '//div[@class="df-toast__body"]'
      Toast Message body: '//div[@class="df-toast__body"]/p'
      Close: '//span[contains(text(),"Close")]'
      Import: '//button[contains(text(),"Import")]'
      Backup: '//input[@name="backup"]'
      Notify Support: '//input[@name="notifySupport"]'
      Choose File: '//input[@type="file"]'
      Restore Backup: '//button[contains(text(),"Restore Backup")]'
      Restore Backup Submit: '//span[contains(text(),"Restore Backup")]'
      auto admt customer map: local mapping file
      auto admt customer zip: local zip file
      Minimum Password Length: '//input[@name=''minLength'']'
      Password Complexity: '//label[contains(text(),''Password Complexity'')]/following-sibling::div'
      Minimum Password Length value: >-
        //label[contains(text(),'Password Minimum
        Length')]/following-sibling::div
      Password Complexity value: '//label[contains(text(),''Password Complexity'')]/following-sibling::div'
      Standard Devices: null
      Settings Page: '//h2[@class=''section__header p-3 pl-4''][contains(text(),''Settings'')]'
      customer settings page is editable: '//textarea[@name=''thirdPartyScript'']'
      Customer settings page in edit mode: '//textarea[@name=''thirdPartyScript'']'
      Third party content: '//textarea[@name=''thirdPartyScript'']'
      Settings save button: '//i[@class=''fa fa-save'']'
      Third party script: '//span[contains(text(),''Configured'')]'
      My Account - Time Zone: '//*[label[text()=''Timezone'']]/div'
      Full Name value: >-
        //label[contains(@class,'label')][.='Full
        Name']//following-sibling::div[contains(@class,'col')]
      Primary Email Address value: >-
        //label[contains(@class,'label')][.='Primary Email
        Address']//following-sibling::div[contains(@class,'col')]
      Usernames value: >-
        //label[contains(@class,'label')][.='Usernames']//following-sibling::div[contains(@class,'col')]
      Role value: >-
        //label[contains(@class,'label')][.='Role']//following-sibling::div[contains(@class,'col')]
      Source value: >-
        //label[contains(@class,'label')][.='Source']//following-sibling::div[contains(@class,'col')]
      Status value: >-
        //label[contains(@class,'label')][.='Status']//following-sibling::div[contains(@class,'col')]
      Timezone value: >-
        //label[contains(@class,'label')][.='Timezone']//following-sibling::div[contains(@class,'col')]
      SMS Phone value: >-
        //td[contains(text(),'SMS
        Phone')]//following-sibling::td[@aria-label='Current Value']
      Work Email value: >-
        //td[contains(text(),'Work
        Email')]//following-sibling::td[@aria-label='Current Value']
      Work Phone value: >-
        //td[contains(text(),'Work Phone')][@aria-label='Device
        Name']/following-sibling::td[@aria-label='Current Value']
      Time Zone value in Time/Date tab: >-
        //label[contains(text(),'Time
        Zone')]//following-sibling::div[contains(@class,'col')]
      Business Hours Start value: >-
        //label[contains(text(),'Business Hours
        Start')]//following-sibling::div[contains(@class,'col')]
      Business Hours End value: >-
        //label[contains(text(),'Business Hours
        End')]//following-sibling::div[contains(@class,'col')]
      Weekend Days value: >-
        //label[contains(text(),'Weekend
        Days')]//following-sibling::div[contains(@class,'col')]
      Broadcast Groups: '//a[normalize-space(text())=''Broadcast Groups'']'
      Broadcast Groups (Filtered by Criteria): >-
        //df-card-title[contains(text(),'Broadcast Groups (Filtered by
        Criteria)')]
    name: Administration Page
  - selectors:
      Company Information section: '//af-customer-details[.//h5[.=''Company Information'']]'
      Custom Field (in Settings): '(//div[@class="form-group row"]//span[contains(text(),@FieldName)])[1]'
      Edit button (in Settings): '//span[contains(@class,''df-button'')][contains(.,'' Edit '')]'
      Edit button (in Default Personal Info): >-
        //h5[contains(text(),'Default Personal
        Info')]/button[contains(text(),'Edit')]
      Edit button (in Custom Fields): '//h5[contains(text(),''Custom Fields'')]/button[contains(text(),''Edit'')]'
      Edit button in Custom Fields Page: '//span[contains(@class,''df-button'')][contains(.,'' Edit '')]'
      Edit button (in Team Management Settings): '//h5[contains(text(),''Team'')]/button[contains(text(),''Edit'')]'
      Edit button (in Group Management Settings): '//h5[contains(text(),''Group'')]/button[contains(text(),''Edit'')]'
      Edit button (in Standard Devices): //h5[contains(text(),'Standard Devices')]//i[@class="fa fa-pencil"]
      Save and Migrate button (in Custom Fields): '//button/span[contains(text(),''Save & Migrate'')]'
      Created Custom Field: '//div[@class="form-group row"]//span[contains(text(),$FieldName)]'
      Field Name cell (in Custom Fields): '//td[contains(text(),$FieldName)]'
      Field Name textbox (in Add field): '//input[@placeholder=''Field Name'']'
      Type Dropdown (in Add field):
        type: dropdown
        open: '//df-select[@name=''type'']'
        value: '//df-option/div[contains(text(),''{value}'')]'
      Input Type Dropdown (in Add field):
        type: dropdown
        open: '//df-select[@name=''inputType'']'
        value: '(//df-option/div[contains(text(),''{value}'')])[last()]'
      Save button (in Add field): >-
        //button[@class='btn btn-blue
        df-button']//span[@class='df-button__content'][contains(text(),'Save')]
      Save button (in Settings): '//span[contains(.,''Save'')]'
      Configure button (in Settings): '//span[@class=''df-button__content''][contains(text(),''Configure'')]'
      Custom Fields page header: >-
        //h2[@class='section__header p-3 pl-4'][contains(text(),'Custom
        Fields')]
      Setup header (in Setup process): '//h5[@class=''section__body-header'']'
      Next button (in Setup process): '//span[contains(text(),''Next'')]'
      Enterprise management system radiobutton (in Setup process): >-
        //label[div[contains(text(),'Yes, from another enterprise management
        system named')]]/div[@class="df-radio-input__container"]
      Will Users And Groups Be Imported From An External Data Source - No: >-
        //*[label[contains(text(),'imported from an external data
        source')]]//*[div[text()=' No ']]/input
      'Will Users And Groups Be Imported From An External Data Source - Yes, from another enterprise management system named': >-
        //*[label[contains(text(),'imported from an external data
        source')]]//div[text()=' Yes, from another enterprise management system
        named ']
      Will users and groups be managed via the web - Yes: >-
        //*[label[contains(text(),'Will users and groups be managed via the
        web')]]//div[text()='Yes']
      Will users and groups be managed via the web - No: >-
        //*[label[contains(text(),'Will users and groups be managed via the
        web')]]//*[div[text()=' No ']]/input
      Allow Customer Admin Users Yes radiobutton (in Setup process): >-
        //div[contains(text(),'Yes') and
        ../../parent::df-radio-group[@name='allowRosterImportByAdmin']]
      Allow importer to override created users checkbox (in Setup process): >-
        //df-checkbox[button[label[span[contains(text(),'Allow importer to
        override UI-created users')]]]]
      Allow importer to override created groups checkbox (in Setup process): >-
        //df-checkbox[button[label[span[contains(text(),'Allow importer to
        override UI-created groups')]]]]
      Allow UI to override import checkbox (in Display Name row): >-
        //df-checkbox[../../parent::tr[@label="Display
        Name"]][../parent::td[@data-header="Allow UI to override import"]]
      Allow UI to override import checkbox (in Description row): >-
        //df-checkbox[../../parent::tr[@label="Description"]][../parent::td[@data-header="Allow
        UI to override import"]]
      Allow UI to override import checkbox (in Email row): >-
        //df-checkbox[../../parent::tr[@label="Email"]][../parent::td[@data-header="Allow
        UI to override import"]]
      Allow UI to override import checkbox (in Business Hours row): >-
        //df-checkbox[../../parent::tr[@label="Business
        Hours"]][../parent::td[@data-header="Allow UI to override import"]]
      Allow UI to override import checkbox (in Cell Phone row): >-
        //df-checkbox[../../parent::tr/td[text()="Cell
        Phone"]][../parent::td[@data-header="Allow UI to override import"]]
      Allow customer to use SMS devices (under Notification Parameters in Application Settings): '//input[@name=''allowSms'']'
      Allow customer to use Voice devices (under Notification Parameters in Application Settings): '//input[@name=''allowVoice'']'
      Admin Users Can Import Roster Files - Yes (in Setup process): >-
        //label[contains(text(),'Admin Users Can Import Roster Files') and
        //div[@class='col'][contains(text(),'Yes')]]
      EMS section (in Setup process): '//h5[contains(text(),''EMS'')]'
      Create User checkbox (in Setup process): '//tr[td[text()="Create User"]]//df-checkbox'
      Delete User checkbox (in Setup process): '//tr[td[text()="Delete User"]]//df-checkbox'
      Create Global Group checkbox (in Setup process): '//tr[td[text()="Create Global Group"]]//df-checkbox'
      Delete Global Group checkbox (in Setup process): '//tr[td[text()="Delete Global Group"]]//df-checkbox'
      Create Team checkbox (in Setup process): '//tr[td[text()="Create Team"]]//df-checkbox'
      Non-existant Member checkbox (in Setup process): '//tr[td[text()="Non-existant Member"]]//df-checkbox'
      Override Teams checkbox (in Setup process): '//tr[td[text()="Override Teams"]]//df-checkbox'
      Delete Team checkbox (in Setup process): '//tr[td[text()="Delete Team"]]//df-checkbox'
      Name section (in Setup process): '//div[contains(text(),$customer_name)]'
      Create Team green icon (in Setup process): '//tr[td[text()="Create Team"]]//i[contains(@class,"fa-check green")]'
      Override Teams green icon (in Setup process): '//tr[td[text()="Override Teams"]]//i[contains(@class,"fa-check green")]'
      Delete Team green icon (in Setup process): '//tr[td[text()="Delete Team"]]//i[contains(@class,"fa-check green")]'
      Create Global Group green icon (in Setup process): >-
        //tr[td[text()="Create Global Group"]]//i[contains(@class,"fa-check
        green")]
      Delete Global Group green icon (in Setup process): >-
        //tr[td[text()="Delete Global Group"]]//i[contains(@class,"fa-check
        green")]
      Create User green icon (in Setup process): '//tr[td[text()="Create User"]]//i[contains(@class,"fa-check green")]'
      Delete User green icon (in Setup process): '//tr[td[text()="Delete User"]]//i[contains(@class,"fa-check green")]'
      Do not allow importer to override created groups green icon: >-
        //tr[td[span[contains(text(),"Do not allow importer to override
        UI-created groups")]]]//i[contains(@class,"fa-check green")]
      EMS configuration (in Setup process): >-
        //af-customer-data-management-settings//div[contains(text(),$sourceName)]
      EMS textbox (in Setup process): '//input[@name=''sourceName'']'
      Allow UI to override import orange icon (in Display Name row): >-
        //td[@data-header="Allow UI to override"]//i[contains(@class,"fa-check
        orange") and ../../parent::tr/td[text()="Display Name"]]
      Allow UI to override import orange icon (in Description row): >-
        //td[@data-header="Allow UI to override"]//i[contains(@class,"fa-check
        orange") and ../../parent::tr/td[text()="Description"]]
      Allow UI to override import orange icon (in Email row): >-
        //td[@data-header="Allow UI to override"]//i[contains(@class,"fa-check
        orange") and ../../parent::tr/td[text()="Email"]]
      Allow UI to override import orange icon (in Business Hours row): >-
        //td[@data-header="Allow UI to override"]//i[contains(@class,"fa-check
        orange") and ../../parent::tr/td[text()="Business Hours"]]
      Allow UI to override import orange icon (in Cell Phone row): >-
        //td[@data-header="Allow UI to override"]//i[contains(@class,"fa-check
        orange") and ../../parent::tr/td[text()="Cell Phone"]]
      Confirm header (in Setup process): '//h1[contains(@class,''section__header'')][.=''Confirm (Step 8 of 8)'']'
      Confirm (Step 8 of 8) label (in Setup process): '//h1[contains(@class,''section__header'')][.=''Confirm (Step 8 of 8)'']'
      Default Personal Escalations (Step 3 of 8) screen: '//h5[contains(text(),''Default Personal Escalations (Step 3 of 8)'')]'
      Save Button (in Setup process): '//span[contains(text(),''Save'')]'
      Name field (read-only): >-
        //label[contains(@class,'label')][.='Name']//following-sibling::div[contains(@class,'col')]
      Customer Type field (read-only): >-
        //label[contains(@class,'label')][.='Customer
        Type']//following-sibling::div[@class='col']
      System Name field (read-only): >-
        //label[contains(@class,'label')][.='System
        Name']//following-sibling::div[@class='col']
      From Address field (read-only): >-
        //label[contains(@class,'label')][.='From
        Address']//following-sibling::div[@class='col']
      Domains field (read-only): >-
        //label[contains(@class,'label')][.='Domains']//following-sibling::div[@class='col']
      Email's Reply Domain field (read-only): >-
        //label[contains(@class,'label')][.="Email's Reply
        Domain"]//following-sibling::div[@class='col']
      Enable SmartContact field (read-only): >-
        //label[contains(@class,'label')][.='Enable
        SmartContact']//following-sibling::div[@class='col']
      Reset SmartContact field (read-only): >-
        //label[contains(@class,'label')][.='Reset
        SmartContact']//following-sibling::div[@class='col']
      Map Based field (read-only): >-
        //label[contains(@class,'label')][.='Map
        Based']//following-sibling::div[@class='col']
      SMS field (read-only): >-
        //label[contains(@class,'label')][.='SMS']//following-sibling::div[@class='col']
      Voice field (read-only): >-
        //label[contains(@class,'label')][.='Voice']//following-sibling::div[@class='col']
      Skype for Business field (read-only): >-
        //label[contains(@class,'label')][.='Skype for
        Business']//following-sibling::div[@class='col']
      Web Reporting field (read-only): >-
        //label[contains(@class,'label')][.='Web
        Reporting']//following-sibling::div[@class='col']
      Third party script field (read-only): >-
        //label[contains(@class,'label')][.='Third party
        script']//following-sibling::div[@class='col']
      Delete Notification After field (read-only): >-
        //label[contains(@class,'label')][.='Delete Notification
        After']//following-sibling::div[@class='col']
      Password Minimum Length field (read-only): >-
        //label[contains(@class,'label')][.='Password Minimum
        Length']//following-sibling::div[@class='col']
      Password Complexity field (read-only): >-
        //label[contains(@class,'label')][.='Password
        Complexity']//following-sibling::div[@class='col']
      Passwords Allow Character Sequencing field (read-only): >-
        //label[contains(@class,'label')][.='Passwords Allow Character
        Sequencing']//following-sibling::div[@class='col']
      Password Retry Limit field (read-only): >-
        //label[contains(@class,'label')][.='Password Retry
        Limit']//following-sibling::div[@class='col']
      Password Expiry field (read-only): >-
        //label[contains(@class,'label')][.='Password
        Expiry']//following-sibling::div[@class='col']
      Multi Factor Authentication field (read-only): >-
        //label[contains(@class,'label')][.='Multi Factor
        Authentication']//following-sibling::div[@class='col']
      Multi Factor Authentication checkbox: >-
        //label[contains(text(),'Multi Factor
        Authentication')]/parent::div//button
      Multi Factor Authentication Enabled: >-
        //label[contains(text(), "Multi Factor
        Authentication")]/parent::div/div[text()=" enabled "]
      Multi Factor Authentication Not Enabled: >-
        //label[contains(text(), "Multi Factor
        Authentication")]/parent::div/div[text()=" not enabled "]
      Voice Customer System Name field (read-only): >-
        //label[contains(@class,'label')][.='Voice Customer System
        Name']//following-sibling::div[@class='col']
      Default Voice field (read-only): >-
        //label[contains(@class,'label')][.='Default
        Voice']//following-sibling::div[@class='col']
      Voice TTS Speedfield (read-only): >-
        //label[contains(@class,'label')][.='Voice TTS
        Speed']//following-sibling::div[@class='col']
      Authorized Voice(s) field (read-only): >-
        //label[contains(@class,'label')][.='Authorized
        Voice(s)']//following-sibling::div[@class='col']
      Call Retry Count field (read-only): >-
        //label[contains(@class,'label')][.='Call Retry
        Count']//following-sibling::div[@class='col']
      Call Retry Delay field (read-only): >-
        //label[contains(@class,'label')][.='Call Retry
        Delay']//following-sibling::div[@class='col']
      Caller ID field (read-only): >-
        //label[contains(@class,'label')][.='Caller
        ID']//following-sibling::div[@class='col']
      Default PIN field (read-only): >-
        //label[contains(@class,'label')][.='Default
        PIN']//following-sibling::div[@class='col']
      Default Pin textbox: '//input[@name=''pin'']'
      Hotline Number(s) field (read-only): >-
        //label[contains(@class,'label')][.='Hotline
        Number(s)']//following-sibling::div[contains(@class,'col')]
      Conference Call Line field (read-only): >-
        //label[contains(@class,'label')][.='Conference Call
        Line']//following-sibling::div[@class='col']
      Meeting ID field (read-only): >-
        //label[contains(@class,'label')][.='Meeting
        ID']//following-sibling::div[@class='col']
      Conference Call Provider Prefix field (read-only): >-
        //label[contains(@class,'label')][.='Conference Call Provider
        Prefix']//following-sibling::div[@class='col']
      Conference Call Provider Suffix field (read-only): >-
        //label[contains(@class,'label')][.='Conference Call Provider
        Suffix']//following-sibling::div[@class='col']
      Name input field: >-
        //label[contains(@class,'label')][.='Name']//following-sibling::div[@class='col']//*[self::button
        or self::input][not(contains(@class,'df-visually-hidden'))]
      From Email Address input field: >-
        //label[contains(@class,'label')][.='From Email
        Address']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Admin Alerting Console checkbox: >-
        //label[contains(@class,'label')][.='Admin Alerting
        Console']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Team Leader Alerting Console checkbox: >-
        //label[contains(@class,'label')][.='Team Leader Alerting
        Console']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Map Based checkbox: >-
        //label[contains(@class,'label')][.='Map
        Based']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Confirmation Options checkbox: >-
        //label[contains(@class,'label')][.='Confirmation
        Options']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Multiple Notifications checkbox: >-
        //label[contains(@class,'label')][.='Multiple
        Notifications']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Minimum Password Length input field: >-
        //label[contains(@class,'label')][.='Minimum Password
        Length']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Password Complexity input field: >-
        //label[contains(@class,'label')][.='Password
        Complexity']//following-sibling::div[@class='col']//div[@class='df-select__input-text']
      Passwords Allow Character Sequencing checkbox: >-
        //label[contains(@class,'label')][.='Passwords Allow Character
        Sequencing']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Password Retry Limit input field: >-
        //label[contains(@class,'label')][.='Password Retry
        Limit']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Password Expiry checkbox: >-
        //label[contains(@class,'label')][.='Password
        Expiry']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Customer System Name input field: >-
        //label[contains(@class,'label')][.='Customer System
        Name']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Voice Customer System Name input field: >-
        //label[contains(@class,'label')][.='Voice Customer System
        Name']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Call Retry Count input field: >-
        //label[contains(@class,'label')][.='Call Retry
        Count']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Call Retry Delay input field: >-
        //label[contains(@class,'label')][.='Call Retry
        Delay']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Caller ID checkbox: >-
        //label[contains(@class,'label')][.='Caller
        ID']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Conference Call Line input field: >-
        //label[contains(@class,'label')][.='Conference Call
        Line']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Meeting ID input field: >-
        //label[contains(@class,'label')][.='Meeting
        ID']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Conference Call Provider Prefix input field: >-
        //label[contains(@class,'label')][.='Conference Call Provider
        Prefix']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Conference Call Provider Suffix input field: >-
        //label[contains(@class,'label')][.='Conference Call Provider
        Suffix']//following-sibling::div[@class='col']//*[self::button or
        self::input][not(contains(@class,'df-visually-hidden'))]
      Application Settings link in Sidebar: >-
        //df-sidebar-item//df-sidebar-item//a[normalize-space(text())='Application
        Settings']
      Customer Settings Page: >-
        //h2[contains(@class,'section__header') and
        normalize-space(text())='Settings']
      Enable Customer field in Customer Settings page: '//div[label[contains(text(),''Enable Customer'')]]/div'
      Default User Information header: '//h1[contains(text(),''Default User Information'')]'
      Default User Information - Time Zone:
        type: dropdown
        open: '//*[@name=''timezone'']'
        value: '//df-option/div[contains(text(),''{value}'')]'
      Time Zone dropdown: '//df-select[@name=''timezone'']'
      Time Zone dropdown options: '//div[contains(text(),''GMT'')]'
      Enter a new domain name Text Field: '//input[@placeholder=''Enter a new domain name'']'
      Customer Edit Screen: '//h5[text()=''Company Information'']'
      View Report - Event Log Summary screen: '//h5[contains(text(),''View Report'')]'
      User column in View Report - Event Log Summary screen: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[1]/p'
      IP address column in View Report - Event Log Summary screen: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[3]/p'
      Description column in View Report - Event Log Summary screen: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[6]/p'
      Event Type column in View Report - Event Log Summary screen: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[5]/p'
      User column of first record in View Report - Event Log Summary screen: '//div[section/h5[contains(text(),''View Report'')]]//tr[1]/td[1]/p'
      Event Type column of first record in View Report - Event Log Summary screen: '//div[section/h5[contains(text(),''View Report'')]]//tr[1]/td[5]/p'
      Description column of first record in View Report - Event Log Summary screen: '//div[section/h5[contains(text(),''View Report'')]]//tr[1]/td[6]/p'
      Description column of second record in View Report - Event Log Summary screen: '//div[section/h5[contains(text(),''View Report'')]]//tr[2]/td[6]/p'
      first cell with False in Description column in View Report - Event Log Summary screen: >-
        (//div[section/h5[contains(text(),'View
        Report')]]//tr/td[6]/p[contains(text(),'false')])[1]
      first cell with True in Description column in View Report - Event Log Summary screen: >-
        (//div[section/h5[contains(text(),'View
        Report')]]//tr/td[6]/p[contains(text(),'true')])[1]
      first cell with Local IP in IP Address column in View Report - Event Log Summary screen: >-
        (//div[section/h5[contains(text(),'View
        Report')]]//tr/td[3]/p[contains(text(),'127.0.0.1')])[1]
      OldEmail in Description column of last record in View Report - Event Log Summary screen: >-
        (//div[section/h5[contains(text(),'View
        Report')]]//tr[last()]/td[6]/p[contains(text(),$UserEmail)])
      NewEmail in Description column of last record in View Report - Event Log Summary screen: >-
        (//div[section/h5[contains(text(),'View
        Report')]]//tr[last()]/td[6]/p[contains(text(),$UserEmailNew)])
      View Report popup: '//h5[contains(text(),''View Report'')]'
      Subject column hyperlink in View Report - Sent Notification Summary: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[2]/a'
      User Name column in View Report - Sent Notification Details: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[1]/p'
      Final Response column in View Report - Sent Notification Details: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[2]/p'
      First Response Time column in View Report - Sent Notification Details: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[3]/p'
      Final Response Time column in View Report - Sent Notification Details: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[4]/p'
      Additional Data column in View Report - Sent Notification Details: '//div[section/h5[contains(text(),''View Report'')]]//tr/td[5]/p'
      Created Subject in View Report: '//a[text()=$NotificationSubject]'
      bytestacker dot com: '//option[@value="bytestacker.com"]'
      bytestacker dot net: '//option[@value="bytestacker.net"]'
      bytestacker dot com in domain: '//span[contains(text(),"bytestacker.com")]'
      bytestacker dot net in domain: '//span[contains(text(),"bytestacker.net")]'
      Delete Registrar Pool Confirmation Dialog: '//h5[text()=''Delete Registrar Pool'']'
      Yes Button in Delete Registrar Pool Confirmation Dialog: '//span[contains(text(),''Yes'')]'
      Import Source - Edit button: '//*[span[contains(.,''Import Source'')]]//button[contains(text(),''Edit'')]'
      Import Source - Import button: >-
        //*[span[contains(.,'Import
        Source')]]//button[contains(text(),'Import')]
      Import Source - Restore Backup button: >-
        //*[span[contains(.,'Import Source')]]//button[contains(text(),'Restore
        Backup')]
      Import Source - Configure button: >-
        //*[span[contains(.,'Import
        Source')]]//button[contains(text(),'Configure')]
      Edit button (in General): '//h5[contains(text(),''General'')]/button[contains(text(),''Edit'')]'
      Mark for deletion Radio Button of Delete User: >-
        //div[text()='mark for
        deletion']//parent::label//div[@class='df-radio-input__outer-circle']
      Are you sure you want to delete selected user Message: >-
        //div[contains(text(),'Are you sure you want to delete selected
        user(s)?')]
      OK Button in Popup: '//span[contains(text(),''OK'')]'
      Any User from list: '(//td[@data-header="Name"])[last()]'
      Delete User Button: '//span[contains(text(),''Delete'')]'
      Selected User: '//td[text()=$selectedUser'']'
      Enable SmartContact Checkbox: '//df-checkbox[@name=''smartContactEnabled'']'
      Enable SmartContact Field Value: '//label[text()=''Enable SmartContact'']/following-sibling::div'
      property value (in Application Settings for FieldName): '//label[text()=$FieldName]/following-sibling::div'
      Smart Contact: '//a[contains(text(),''SmartContact'')]'
      SmartContact Welcome Page: '//h1[text()=''Welcome to SmartContact'']'
      Configuration Button on SmartContact Welcome Page: '//span[text()=''Configuration'']'
      From Field on SmartContact Configuration page: '//input[@name=''smartContactFromEmail'']'
      SmartContact Phone Toggle Button: >-
        //df-slide-toggle[@name='SmartContact_Phone' and @class='df-slide-toggle
        df-slide-toggle--label-before ng-valid ng-dirty ng-touched']
      BUMP 01 Slider: >-
        //div[h2[text()='BUMP
        01']]//following-sibling::div//div[@id='df-slider__input-thumb']
      Save button on SmartContact Configuration page: '//span[text()=''Save'']'
      SmartContact Phone Toggle Button Enabled: >-
        //df-slide-toggle[contains(@class,'df-slide-toggle--checked') and
        @name='SmartContact_Phone']
      Edit button for Notification API: >-
        //h5[contains(text(),'Notification
        API')]/button[contains(text(),'Edit')]
      Web Services Settings screen: '//h5[contains(text(),''Web Services Settings'')]'
      Notification API version dropdown: '//df-select[@name=''apiNotificationVersion'']'
      version 1: '//df-option[@value=''1.0'']'
      version 2: '//df-option[@value=''2.0'']'
      SOAP Address for notification API: '//div[contains(text(),''soap-api/notification'')]'
      Notification Properties - Edit: '//h5[text()='' Notification Properties '']/button[text()='' Edit '']'
      User Management Settings page: '//h1[contains(text(),''User Management Settings'')]'
      General - Create User - create enabled user: '//div[text()=''create enabled user'']'
      General - Create User - create disabled user: '//div[text()=''create disabled user'']'
      General - Create User - ignore (do not import): '//div[text()=''ignore (do not import)'']'
      General - Override Users - Allow importer to override UI-created users: '//span[text()='' Allow importer to override UI-created users '']'
      Access Properties - Usernames - Import: '(//*[td[text()=''Usernames'']]//td)[2]//df-checkbox'
      Access Properties - Usernames - Allow UI to override import: '(//*[td[text()=''Usernames'']]//td)[3]//df-checkbox'
      Access Properties - Usernames - Self: '(//*[td[text()=''Usernames'']]//td)[5]//df-checkbox'
      Usernames checked for Administrators under Access Properties section: >-
        //tr[td[text()="Usernames"]]//td[@aria-label="Administrators"]//i[contains(@class,"fa-check
        green")]
      Password checked for Administrators under Access Properties section: >-
        //tr[td[text()="Password"]]//td[@aria-label="Administrators"]//i[contains(@class,"fa-check
        green")]
      PIN checked for Administrators under Access Properties section: >-
        //tr[td[text()="PIN"]]//td[@aria-label="Administrators"]//i[contains(@class,"fa-check
        green")]
      Enabled/Disabled checked for Administrators under Access Properties section: >-
        //tr[td[text()="Enabled/Disabled"]]//td[@aria-label="Administrators"]//i[contains(@class,"fa-check
        green")]
      Role checkbox for Administrators under Access Properties section: '//tr[td[text()="Role"]]//td[@aria-label="Administrators"]//df-checkbox'
      unchecked Role for Administrators under Access Properties section: >-
        //tr[td[text()="Role"]]//td[@aria-label="Administrators"]//i[contains(@class,"fa-times
        red")]
      Checked Create User for Administrators under General section: '//tr[td[text()="Create User"]]//i[contains(@class,"fa-check green")]'
      Checked Delete User for Administrators under General section: '//tr[td[text()="Delete User"]]//i[contains(@class,"fa-check green")]'
      Create Global Group checkbox for Administrators in Group Management settings: '//tr[td[text()="Create Global Group"]]//td[3]//df-checkbox'
      Override Global Groups checkbox for Administrators in Group Management settings: '//tr[td[text()="Override Global Groups"]]//td[3]//df-checkbox'
      Delete Global Group checkbox for Administrators in Group Management settings: '//tr[td[text()="Delete Global Group"]]//td[3]//df-checkbox'
      Non-existant Member (n/a) for Administrators in Group Management settings: '//tr[td[text()="Non-existant Member"]]//td[3][text()="n/a"]'
      Override Global Groups has Green color check for Administrators: >-
        //tr[td[text()="Create Global
        Group"]]//td[@aria-label="Administrators"]//i[contains(@class,"fa-check
        green")]
      Notification Properties - Display Name - Import: '(//*[td[text()=''Display Name'']]//td)[2]//df-checkbox'
      Notification Properties - Display Name - Allow UI to override import: '(//*[td[text()=''Display Name'']]//td)[3]//df-checkbox'
      Notification Properties - Display Name - Self: '(//*[td[text()=''Display Name'']]//td)[4]//df-checkbox'
      Notification Properties - Display Name - Leaders: '(//*[td[text()=''Display Name'']]//td)[5]//df-checkbox'
      History text body: '//*[h5[text()=''History'']]//td'
      History text body lines: '//*[h5[text()=''History'']]//td/br'
      Self permission Checkbox of Cell Phone: '//tr[td[text()=''Cell Phone'']]//td[@data-header=''Self'']//df-checkbox'
      Self permission of Cell Phone is Disabled: >-
        //tr[td[text()='Cell
        Phone']]//td[@data-header='Self']//i[contains(@class,'red')]
      Add Field Popup: '//h5[text()=''Add field'']'
      Edit Field Popup: '//h5[text()=''Edit field'']'
      Field Name with Input Type: '//tr[td[contains(text(),$FieldName)] and td[text()=$inputType]]'
      My Account header: '//h1[normalize-space(.)=''My Account'']'
      Password Complexity dropdown: '//df-select[@name=''complexity'']'
      '''Mix Numeric, Upper and Lower case characters, and Special characters'' option of the Password Complexity dropdown': >-
        //df-option[normalize-space(.)='Mix Numeric, Upper and Lower case
        characters, and Special characters']
      '''No restriction'' option of the Password Complexity dropdown': '//df-option[normalize-space(.)=''No restriction'']'
      the 'Allow Hotline access to' checkbox in 'Settings' page: >-
        //df-checkbox[button[label[span[contains(text(),'Allow Hotline access
        to')]]]]
      the 'Enable Hotline Pro' checkbox in 'Settings' page: >-
        //df-checkbox[button[label[span[contains(text(),'Enable Hotline
        Pro')]]]]
      the 'Label' input under 'Hotline Numbers' section in 'Settings' page: >-
        //div[contains(@class,'row') and
        div[label[contains(text(),'Label')]]]//input
      the 'Add' button under 'Hotline Numbers' section in 'Settings' page: >-
        //div[contains(@class,'add-hotline-number')]//button[span[contains(text(),'Add')]]
      the 'Hotline Notification History (Days)' input under 'Hotline Numbers' section in 'Settings' page: '//input[@name=''notificationHistoryDays'']'
      the 'Voice' dropdown under 'Hotline Numbers' section in 'Settings' page:
        type: dropdown
        open: '//df-select[@name=''voiceDefaultValue'']'
        value: '//df-option/div[.=''{value}'']'
      the 'Available Hotline Numbers' dropdown under 'Hotline Numbers' section in 'Settings' page:
        type: dropdown
        open: '//df-select[@name=''numberToAdd'']'
        value: '//df-option/div[.=''{value}'']'
      Device Name: //input[@name='deviceName']
      Device Types:
        type: dropdown
        open: '//df-select[@name=''deviceTypes'']'
        value: '//df-option/div[contains(.,''{value}'')]'
      Work Phone in Standard Devices: //h5[text()=' Standard Devices ']//following::li[text()=' Work Phone ']
    name: Settings page
  - selectors:
      New button in Manage Library page: '//span[contains(text(),''New'')]'
      Edit button in Manage Library page: '//span[contains(text(),''Edit'')]'
      Title textbox in Manage Library page: '//input[@id=''title'']'
      Enable Editing checkbox in Manage Library page: '//input[@name=''enableediting'']'
      Title cell in Manage Library page: '//td//strong[contains(text(),$NotificationTitle)]'
      Manage Library link in Sidebar: >-
        //df-sidebar-item//df-sidebar-item//a[normalize-space(text())='Manage
        Library']
      Notifications link in Sidebar: >-
        //div[contains(@class,'sidebar')]//a[normalize-space(text())='Notifications']
      Sent Notifications link in Sidebar: >-
        //df-sidebar-item//df-sidebar-item//a[normalize-space(text())='Sent
        Notifications']
      Notification Template List: >-
        //h1[contains(@class,'section__header') and
        normalize-space(text())='Notification Template']
      Delete button in Manage Library page: '//button[not(@disabled='''')]//span[contains(.,''Delete'')]'
      Create Notification Template page: '//h1[contains(text(),''Create Notification Template'')]'
      Send All Notifications checkbox in Manage Library page: '//input[@name=''sendall'']'
      Quick Launch ID in Manage Library page: '//input[@name="qlid"]'
      Generate checkbox: '//input[@name="generate"]'
      Press 1 I confirm that I have received this message (in Responses section): >-
        //strong[contains(text(),'I confirm that I have received this
        message.')]/font[contains(text(),'Press 1')]
      Press 1 I received the message and will join the conference call (in Responses section): >-
        //strong[contains(text(),'I received the message and will join the
        conference call')]/font[contains(text(),'Press 1')]
      Press 1 I confirm that I will take action regarding this message (in Responses section): >-
        //strong[contains(text(),'I confirm that I will take action regarding
        this message')]/font[contains(text(),'Press 1')]
      Press 1 Yes (in Responses section): '//strong[contains(text(),''Yes'')]/font[contains(text(),''Press 1'')]'
      Press 2 No (in Responses section): '//strong[contains(text(),''No'')]/font[contains(text(),''Press 2'')]'
      'Press 2 I received the message, but cannot attend the conference call (in Responses section)': >-
        //strong[contains(text(),'I received the message, but cannot attend the
        conference call.')]/font[contains(text(),'Press 2')]
      Responses template dropdown in right panel: >-
        //*[*[contains(text(),'Responses')]]//button[contains(@class,'dropdown__button')]
      Conference Call option under Responses template dropdown in right panel: >-
        //div[contains(@class,'dropdown')]/button[contains(text(),'Conference
        Call')]
      Poll/Survey option under Responses template dropdown in right panel: >-
        //div[contains(@class,'dropdown')]/button[contains(text(),'Poll/Survey')]
      First Responder(s) option under Responses template dropdown in right panel: >-
        //div[contains(@class,'dropdown')]/button[contains(text(),'First
        Responder(s)')]
      Notification templates displayed on Manage Library page: '//table[contains(@class,''df-table'')]'
      Name of the Notification Template to be Deleted: >-
        (//td[@data-header='Title' and
        @aria-label='Title'])[1]/descendant::strong
      Notification Template To be Deleted: '//strong[contains(text(),$NotificationTemplateToDelete)]'
      Are you sure you want to delete selected Notification Templates? message: >-
        //div[contains(text(),'Are you sure you want to delete selected
        Notification Templates?')]
      Deleting templates succeeded message: '//p[contains(text(),''Deleting templates succeeded.'')]'
      Hold for manual Execution (Execution Type): '//div[contains(text(),''Hold for Manual Execution'')]'
      Send when template is launched (Execution Type): '//div[contains(text(),''Send when template is launched'')]'
      End Time dropdown: >-
        (//label[contains(text(),'End
        Time')]/following::div[@class="df-select__input
        df-select--shadow-box"])[1]
      No end time (option in End Time dropdown): '//div[@class="ng-star-inserted" and contains(text(),''No end time'')]'
      End after (option in End Time dropdown): '//div[@class="ng-star-inserted" and contains(text(),''End after'')]'
      Hours field (after clicking on End after): '//input[@name="endAfter"]'
      The value must be greater than 0 and less than 1000 (Under Hours field): >-
        //div[contains(text(),'The value must be greater than 0 and less than
        100')]
      Recurrence Pattern dropdown: >-
        //label[contains(text(),'Recurrence
        pattern')]/following::div[@class="df-select__input
        df-select--shadow-box"]
      No Recurrence (in Recurrence Pattern dropdown): '//div[contains(text(),''No Recurrence'') and @class="ng-star-inserted"]'
      Daily (in Recurrence Pattern dropdown): '//div[contains(text(),''Daily'')]'
      Weekly (in Recurrence Pattern dropdown): '//div[contains(text(),''Weekly'')]'
      Monthly (in Recurrence Pattern dropdown): '//div[contains(text(),''Monthly'')]'
      Annually (in Recurrence Pattern dropdown): '//div[contains(text(),''Annually'')]'
      Hourly (in Recurrence Pattern dropdown): '//div[contains(text(),''Hourly'')]'
      'first name cell (in Notification Template list, Recipient Editor)': '(//af-notification-template//table//td[@data-header=''Name''])[1]'
      notification template title cell (in Notification Template list > Manage Library): >-
        (//af-notification-template//table//td[@data-header='Title'][.//*[normalize-space(text())=$NotificationTemplateTitle]])[1]
      Report dropdown in the Manage Library page:
        type: dropdown
        open: '//button[normalize-space(.)=''Report'']'
        value: '//button[normalize-space(.)=''{value}'']'
      Detailed Report option of the Report dropdown: '//button[normalize-space(.)=''Detailed Report'']'
      List Summary Report option of the Report dropdown: '//button[normalize-space(.)=''List Summary Report'']'
      More dropdown in the Manage Library page:
        type: dropdown
        open: '//button[normalize-space(.)=''More'']'
        value: '//button[normalize-space(.)=''{value}'']'
      Clone to Team(s) option of the Report dropdown: '//button[normalize-space(.)=''Clone to Team(s)'']'
      Section header: '//h1[contains(@class,''section__header'')]'
      Page header: '//h1[contains(@class,''section__header'')]'
      Page breadcrumb: >-
        (//span[contains(@class,'df-breadcrumbs__links-container')][contains(@class,'visible')])[last()]
      New button in the Notification Template page: '//button[normalize-space(.)=''New'']'
      Created Notification Template: '//strong[contains(text(), $Title)]'
      '<Title> under the ''Team: Global'' in the Manage Library list': >-
        //td[@data-header='Title'][.//strong[normalize-space(.)=$Title]][.//p[normalize-space(.)='Team:
        Global']]//strong
      '<Title> under the ''Team: team1'' in the Manage Library list': >-
        //td[@data-header='Title'][.//strong[normalize-space(.)=$Title]][.//p[normalize-space(.)='Team:
        team1']]//strong
      Teams dialog: >-
        //div[contains(@class,'modal-dialog')][.//h4[normalize-space(.)='Teams']]
      Clone button in the Teams dialog: '//button[normalize-space(.)=''Clone'']'
      Show Sub-team button in the Manage Library list: '//button[normalize-space(.)=''Show Sub-team'']'
      '''team1'' row in the Teams dialog': '//td[@data-header=''Team Name''][normalize-space(.)=''team1'']'
      Delete button in the Manage Library page: '//button[normalize-space(.)=''Delete'']'
      Search textbox (in Teams dialog): '//*[@role=''dialog''][contains(.,''Teams'')]//*[@id="search"]'
      Items per page dropdown (in Teams dialog):
        type: dropdown
        open: >-
          //*[@role='dialog'][contains(.,'Teams')]//div[@class='df-table-paginator__options__select'
          and span[contains(text(),'Items per page')]]/df-select
        value: '//df-option/div[.=''{value}'']'
    name: Notification Template - Manage Library
  - selectors:
      Sent Notification header: '//h1[.=''Sent Notification'']'
      Notification breadcrumb: '//a[contains(@class,''df-breadcrumbs__link--active'')]'
      Notification List breadcrumb: '//nav//a[contains(.,''Notification List'')]'
      Recipient Editor breadcrumb (in Select Recipient page): '//nav//a[contains(.,''Recipient Editor'')]'
      Notification Detail Cell for NotificationSubject (in Sent Notification page): >-
        //td[@data-header="Notification
        Detail"]//b[contains(text(),$NotificationSubject)]
      Notification Detail name in the list that does not start with 'filteringValue': >-
        //td[@data-header="Notification Detail" and
        not(starts-with(text(),$filteringValueLower)) and
        not(starts-with(text(),$filteringValueUpper))]
      Title of first Notification in Sent Notifications: '//tr[td[@aria-label=''Notification Detail'']][1]//b'
      Title of first Notification in Scheduled Notifications: '//tr[td[@aria-label=''Notification Detail'']][1]//b'
      Date column of first Notification in Sent Notifications: '(//td[@aria-label=''Date''])[1]'
      View Details button (in Sent Notification page): '//span[contains(text(),''View Details'')]'
      Type to search textbox (in Select Recipient page): '//input[@placeholder=''Type to search...'']'
      Search icon (in Select Recipient page): >-
        //div[@role='tabpanel' and
        contains(@class,'active')]//button[contains(@class,'search-btn')]
      Save button (in Select Recipient page): '//span[contains(text(),''Save'')]'
      Add button (in Select Recipient page): '//td[@class=''ng-star-inserted'']//button[contains(@class,''pick-button'')]'
      row with fullname Add button (in Recipient Editor page): >-
        //tr[.//td[normalize-space(.)=$Fullname]]//button[contains(@class,'pick-button')]
      Add button (in Notifications dialog): >-
        //button[@class='btn btn-green
        df-button']//span[@class='df-button__content'][contains(text(),'Add')]
      Selected recipient (in Sent Notifications page): '//div[@class=''df-chip__content-wrapper'' and contains(text(),$Fullname)]'
      Selected recipient (in Create Notification Template page): '//div[@class=''df-chip__content-wrapper'' and contains(text(),$Fullname)]'
      Sent Notifications: '//a[text()='' Sent Notifications '']'
      Phone Number textbox: '//input[@name=''phoneNumber'']'
      Meeting ID textbox: '//input[@name=''meetingID'']'
      Responses rows in Edit Notification page: >-
        //df-card[df-card-header[df-card-title[@class='df-card__title' and
        text()='Responses']]]//table/tbody/tr
      More Notifications button in Edit Notification page: '//span[contains(text(),''More Notifications'')]'
      Cancel button in Response Editor dialog: >-
        //button[@class='btn btn-red
        df-button']//span[@class='df-button__content'][contains(text(),'Cancel')]
      Attachment button (in Sent Notification page): '//span[contains(text(),''Attachment'')]'
      Attachments Editor page: '//h5[@class=''modal-title''][contains(text(),''Attachments Editor'')]'
      File input (in Attachments Editor page): '//input[@id=''file'']'
      Uploaded file (in Attachments Editor page): '//td/strong[contains(text(),''.txt'')]'
      Save button (in Attachments Editor page): >-
        //button[@class='m-1
        df-button']//span[@class='df-button__content'][contains(text(),'Save')]
      Save button in Add Notification page: '//button[normalize-space(.)=''Save'']'
      Notification subject in Notifications dialog: '//td[contains(text(),$NotificationSubject)]'
      Attached file (in Sent Notifications page): '//div[@class=''col-9 notification-info''][contains(text(),''1 file(s).'')]'
      Save As Notification Template button (in Sent Notifications page): '//button/span[contains(text(),''Save As Notification Template'')]'
      Send Selected Notification (in Edit Notification Template page): '//button/span[contains(text(),''Send Selected Notification'')]'
      Edit Notification Template page: '//h1[contains(text(),''Edit Notification Template'')]'
      Save and Open in Alert Consolebutton (in Edit Notification Template page): '//button/span[contains(text(),''Save & Open in Alert Console'')]'
      Launch Center page: '//h1[contains(text(),''Launch Center'')]'
      Notification Template dropdown in Add Notification page:
        type: dropdown
        open: >-
          //div[contains(@class,'notification-template
          dropdown')]/button[contains(@class,'df-dropdown__button--basic
          dropdown-toggle')]
        value: '//button[contains(text(),''{value}'')]'
      Notification submitted successfully message: '//p[contains(text(),''Notification submitted successfully'')]'
      Compose: '//span[text()='' Compose '']'
      Compose button: '//button[normalize-space(.)=''Compose'']'
      Subject: '//input[@name=''subject'']'
      Message: '//div[@contenteditable=''true'']'
      Delete: '//span[text()='' Delete'']'
      Delete button: '//button[normalize-space(.)=''Delete'']'
      'Yes': '//span[text()=''Yes'']'
      Yes button: '//button[normalize-space(.)=''Yes'']'
      No button: '//button[normalize-space(.)=''No'']'
      Cancel button: '//button[normalize-space(.)=''Cancel'']'
      Select Recipient: '//button[text()=''Select Recipient'']'
      Select Recipient button: '//button[normalize-space(.)=''Select Recipient'']'
      Adminuser1: '//td[text()=''adminuser1'']'
      Send: '//span[text()=''Send'']'
      Send button: '//button[normalize-space(.)=''Send'']'
      All Recipients: '//a[text()='' All Recipients'']'
      Results by Response Tab: '//a[contains(text(),''Results by Response'')]'
      Results by Response Tab selected: '//a[contains(text(),''Results by Response'')][@class=''nav-link active'']'
      Time Summary Tab: '//a[contains(text(),''Time Summary'')]'
      Time Summary Tab selected: '//a[contains(text(),''Time Summary'')][@class=''nav-link active'']'
      All Recipents Tab: '//a[@role=''tab'' and contains(text(),''All Recipients'')]'
      All Recipients Tab selected: '//a[contains(text(),''All Recipients'')][@class=''nav-link active'']'
      user_Name in Users in All Recipients: '//td[@aria-label=''Name'' and contains(text(),$user_Name)]'
      Name of first recipient in All Recipients: '(//td[@aria-label=''Name''])[1]'
      Recipients with name rec_name: '//td[@aria-label=''Name''][contains(text(),$rec_name)]'
      Recipients in All Recipients: '//td[@aria-label=''Name'']'
      Work Email - Email sent to reg_user_email under Result Log: >-
        //span[contains(text(),'Email sent to') and
        contains(text(),$reg_user_email)]
      Original Recipients Tab: '//a[contains(text(),''Original Recipients'')]'
      Original Recipients Tab selected: '//a[contains(text(),''Original Recipients'')][@class=''nav-link active'']'
      Result Logs: '//h5[text()=''Result Log'']/following-sibling::div'
      result log entry (in Sent Notifications > Result Logs table): >-
        //h5[text()='Result
        Log']/following-sibling::div//table//td[contains(.,$LogEntry)]
      Clone: '//span[contains(text(),''Clone'')]'
      Escalation Override: '//span[text()='' Escalation Override '']'
      Escalation Override button: '//button[normalize-space(.)=''Escalation Override'']'
      Specify a custom device escalation: '//div[@id=''radio-outer-df-radio-2'']'
      Work Smart Phone: null
      Results by Response tab: '//a[contains(text(),''Results by Response'')]'
      Response Editor page: '//h5[@class=''modal-title''][contains(text(),''Response Editor'')]'
      Response Text (in Response Editor): '//input[@name=''responseText'']'
      Abbreviation (in Response Editor): '//input[@name=''responseAbbreviation'']'
      Phone Number (in Response Editor): '//input[@name=''phoneNumber'']'
      Save button (in Response Editor dialog): >-
        //button[@class='df-button']//span[@class='df-button__content'][contains(text(),'Save')]
      Abbreviation - Decline (in Responses section): '//p[contains(text(),''Abbreviation: Decline'')]'
      Abbreviation - Confirmed (in Responses section): '//p[contains(text(),''Abbreviation: Confirmed'')]'
      Abbreviation - Attend (in Responses section): '//p[contains(text(),''Abbreviation: Attend'')]'
      Abbreviation - No Attend (in Responses section): '//p[contains(text(),''Abbreviation: No Attend'')]'
      Abbreviation - Yes (in Responses section): '//p[contains(text(),''Abbreviation: Yes'')]'
      Abbreviation - No (in Responses section): '//p[contains(text(),''Abbreviation: No'')]'
      Bridge to conference call - On (in Responses section): '//p[contains(text(),''Bridge to conference call: On'')]'
      Bridge to conference call - On radio (in Responses section): '//*[@name=''bridgeToConferenceCall'']//*[@value=''on'']'
      Bridge to conference call - PhoneNumber (in Responses section): '//input[@name=''phoneNumber'']'
      Bridge to conference call - Country Other (in Responses section): '//div[@class=''df-radio-input__text'' and contains(text(),''Other'')]'
      Bridge to conference call - MeetingID (in Responses section): '//input[@name=''meetingID'']'
      Response Limit - 1 (in Responses section): '//p[contains(text(),''Response Limit: 1'')]'
      Notification Confirmed with response Decline (in Result Log section): >-
        //span[contains(text(),'Cell Phone: Cell PhoneConfirmed with response
        Decline with data Decline')]
      Notification Confirmed with response Confirmed (in Result Log section): >-
        //span[contains(text(),'SMS Phone: SMS PhoneConfirmed with response
        Confirmed')]
      Download Report button (Notification Summary page): '//span[contains(text(),''Download Report'')]'
      Personal Email: '//td[contains(text(),''Personal Email'')]'
      SMS Phone (in Device list section): '//td[contains(text(),''SMS Phone'')]'
      Work Email: '//td[contains(text(),''Work Email'')]'
      Work Email (in Custom Escalation section): >-
        //tr[@class='selected ng-star-inserted']//td[contains(text(),'Work
        Email')]
      Work Smart Phone (in Device list section): '//td[contains(text(),''Work Smart Phone'')]'
      Work Smart Phone (in Custom Escalation section): >-
        //tr[@class='selected ng-star-inserted']//td[contains(text(),'Work Smart
        Phone')]
      Cell Phone (in Custom Escalation section): >-
        //tr[@class='selected ng-star-inserted']//td[contains(text(),'Cell
        Phone')]
      Already added Work Email (in Custom Escalation section): '//tr[@class=''ng-star-inserted'']//td[contains(text(),''Work Email'')]'
      SMS Phone (in Custom Escalation section): >-
        //tr[@class='selected ng-star-inserted']//td[contains(text(),'SMS
        Phone')]
      Save button (in Escalation Editor dialog): >-
        //button[@class='df-button']//span[@class='df-button__content'][contains(text(),'Save')]
      Respond On-Behalf-Of button (in All Recipients section): '//button/span[contains(text(),''Respond On-Behalf-Of'')]'
      I confirm that I have received this message label (in Overview Responses section): >-
        //af-response-overview//div[contains(text(),'I confirm that I have
        received this message.')]
      Confirmed _ of _ _% (in Results by Response): '//div[span[contains(.,''Confirmed'')]][contains(.,''%'')]'
      No Response Yet _ of _ _% (in Results by Response): '//div[span[contains(.,''No Response Yet'')]][contains(.,''%'')]'
      Confirmed label (in Overview Responses section): >-
        //af-response-overview[//label[contains(text(),'Abbreviation:')]]//div[contains(text(),'Confirmed')]
      Not Confirmed label (in Results by Response page): '//div[@class=''text-center my-1''][contains(text(),''0 of 1 (0%)'')]'
      Select on-behalf-of response dialog: >-
        //h5[@class='modal-title'][contains(text(),'Select on-behalf-of
        response')]
      Response dropdown (in Select on-behalf-of response dialog): '//df-select[@name=''responses'']'
      I confirm that I have received this message option (in Response dropdown): >-
        //df-option//div[contains(text(),'I confirm that I have received this
        message.')]
      Comment text (in Select on-behalf-of response dialog): '//input[@name="comment"]'
      Save button (in Select on-behalf-of response dialog): >-
        //button[@class='btn
        df-button']//span[@class='df-button__content'][contains(text(),'Save')]
      Selected recipient (in All Recipients section): '//td[contains(text(),$Fullname)]'
      Selected recipient (in Original Recipients section): '//td[contains(text(),$Fullname)]'
      Status of the Selected recipient (in All Recipients section): '//tr[td[contains(text(),$Fullname)]]/td[@aria-label=''Status'']'
      Status Confirmed (in All Recipients section): >-
        //td[@data-header="Status"][contains(text(),'Confirmed with response
        Conf')]
      Notification Summary value (in Sent Notification page): >-
        //div[label[contains(text(),'Notification
        Summary')]]//div[contains(@class,'font-weight-bold')][contains(text(),$NotificationSubject)]
      Time cell for Work Email (in Result Log section): '//tr[td[span[contains(text(),''Work Email:'')]]]/td[@nowrap]'
      Personal Email under notification list: '//span[contains(text(),''Personal Email'')]'
      Use specified escalation instead of user personal label: >-
        //span[contains(text(),'Use specified escalation instead of user
        personal')]
      AlertFind Logo (in Notification Confirmation screen): '//df-topbar-logo[@name=''AlertFind'']'
      Please select a response from the list below label (in Notification Confirmation screen): >-
        //label[contains(text(),'Please select a response from the list
        below.')]
      I confirm that I have received this message radiobutton (in Notification Confirmation screen): >-
        //label[div[contains(text(),'I confirm that I have received this
        message.')]]/div[@class='df-radio-input__container']
      Ok button (in Notification Confirmation screen): >-
        //button[contains(@class,'df-button
        success')]/span[contains(text(),'Ok')]
      Thank You label (in Notification Confirmation screen): '//h2[contains(text(),''Thank You!'')]'
      You have confirmed the message label (in Notification Confirmation screen): '//p[contains(text(),''You have confirmed the message.'')]'
      Admin User logged in: '//df-user-profile//div[contains(text(),''Welcome, adminuser1'')]'
      User USER_NAME is logged in: >-
        //df-user-profile//div[contains(text(),'Welcome,')][contains(text(),$USER_NAME)]
      Welcome USER_NAME: >-
        //df-user-profile//div[contains(text(),'Welcome,')][contains(text(),$USER_NAME)]
      Welcome eparoot at top right: >-
        //df-user-profile//div[contains(text(),'Welcome,')][contains(text(),'eparoot')]
      Notification List Screen: >-
        //a[contains(@class,'df-breadcrumbs__link--active') and
        contains(.,'Notification List')]
      Save as Template header: '//a[contains(text(),''Save as Template'')]'
      Compose tab: '//a[text()='' Compose'']'
      Advanced tab: '//a[text()='' Advanced'']'
      Scheduling button: '//span[text()='' Scheduling'']'
      Scheduling popup: '//h5[text()=''Scheduling'']'
      Scheduling popup - Time Zone: '//*[*[h5[text()=''Scheduling'']]]//span[contains(text(),$TimeZone)]'
      Compose Notification Screen: '//a[contains(text(),''Compose Notification'')]'
      Select Recipient Button: '//button[text()=''Select Recipient'']'
      User List Screen: '(//div[contains(@role,''tabpanel'')])[1]'
      User List screen: >-
        //a[contains(@class,'df-breadcrumbs__link--active') and contains(.,'User
        List')]
      Add button corresponding to newly created user: '//td[@data-header=''Name''][text()=$Fullname]/following::button[1]'
      Save Button: '//i[contains(@class,''fa fa-save'')]'
      To field Content Wrapper: '//div[@class=''df-chip__content-wrapper'']'
      Work Email in Escalation Editor: >-
        (//tr[contains(@class,'ng-star-inserted')]/td[contains(text(),'Work
        Email')])[1]
      Cell Phone in Escalation Editor: >-
        (//tr[contains(@class,'ng-star-inserted')]/td[contains(text(),'Cell
        Phone')])[1]
      Work Email added on the right panel: >-
        (//tr[contains(@class,'ng-star-inserted')]/td[contains(text(),'Work
        Email')])[2]
      Cell Phone added on the right panel: >-
        (//tr[contains(@class,'ng-star-inserted')]/td[contains(text(),'Cell
        Phone')])[2]
      Notification Completed: '//div[contains(text(),''Notifications Completed'')]'
      Body Text Field (in Compose Notification): '//div[contains(@class,''fr-element'') and contains(@class,''fr-view'')]'
      Type to Search Box: '//input[@id=''search'' and contains(@placeholder,''Type to search'')]'
      Send Button (in Compose Notification): '//button[contains(@class,''df-button'')]/span[contains(text(),''Send'')]'
      Respond on-behalf-of was successful message: '//h1[contains(text(),''Respond on-behalf-of was successful.'')]'
      Search Icon: >-
        //button[contains(@class,'search-btn') and
        contains(@class,'ng-star-inserted') and contains(@type,'button')]
      Newly Created User Fullname: '//td[@data-header=''Name''][contains(text(),$Fullname)]'
      Newly Created User Fullname in right panel: '//span[@class=''ng-star-inserted'' and contains(text(),$Fullname)]'
      Status (in View Notification): '//label[contains(text(),''Status'')]/following::div[1]'
      Notification Summary: '//label[contains(text(),''Notification Summary'')]/following::div[1]'
      Subject Name in Notification Summary: '//label[contains(text(),''Notification Summary'')]/following::div[1]/div'
      Cancel Button: '//span[contains(text(),''Cancel'')]'
      Are you sure want to cancel this notification? message: >-
        //div[contains(text(),'Are you sure you want to cancel this
        notification?')]
      Maximum Retry Count value on Results by Response tab: '//label[contains(text(),''Maximum Retry Count:'')]/following::div[1]'
      Device Retry Button: '//span[contains(text(),''Device Retry'')]'
      Device Retry Editor Popup: '//h5[contains(text(),''Device Retry Editor'')]'
      Maximum Number Of Call Retries Dropdown: >-
        //label[contains(text(),'Maximum number of call
        retries')]/following::div[contains(text(),'Use default')]
      4 Option in Retries Dropdown: '//div[contains(text(),''4'')]'
      Save Button in Popup: '//h5[@class=''modal-title'']//following::i[contains(@class,''fa fa-save'')]'
      Broadcast Group Tab: '//a[normalize-space(text())=''Broadcast Group'']'
      Name Search textbox in Broadcast Group Tab: '(//input[@id=''name-search''])[1]'
      Plus Icon of Group Name: >-
        //tr[td[text()=$groupName]]//following-sibling::td//i[@class='fa
        fa-plus']
      Escalation Override Button: '//span[normalize-space(text())=''Escalation Override'']'
      Specify a custom device escalation Radio Button: '//div[@id=''radio-outer-df-radio-2'']'
      SMS Phone: '//td[text()=''SMS Phone'']'
      SMS Phone Added To Right Panel: >-
        //df-card-header[df-card-title[text()='Custom
        Escalation']]//following-sibling::df-card-content//td[text()='SMS
        Phone']
      Save Button on Escalation Editor Popup: '//div[@class=''modal-content'']//span[normalize-space(text())=''Save'']'
      Save button in Broadcast Group Tab: '//span[contains(text(),''Save'')]'
      Group Name Added as Recipient: '//div[text()=$groupName]'
      User List Screen for Recipient: '(//div[contains(@role,''tabpanel'')])[1]'
      Name Search textbox in Escalation Group Tab: '(//input[@id=''name-search''])[2]'
      Name Search textbox in Smart Group Tab: '(//input[@id=''name-search''])[3]'
      Name Search textbox in Users Tab: '(//input[@id=''search''])[1]'
      Save button in Users Tab: '//span[contains(text(),''Save'')]'
      Escalation Editor Popup: '//h5[text()=''Escalation Editor'']'
      Save & Open in Alert Console Button: '//span[normalize-space(text())=''Save & Open in Alert Console'']'
      Added Subject in Notification Template: '//span[contains(text(),$NotificationSubject)]'
      Added Recipient in Notification Template: '//span[contains(text(),$Fullname)]'
      Send All Notifications Button: '//span[contains(text(),''Send All Notifications'')]'
      Created Notification Title: '//div/b[text()=$NotificationSubject]'
      Email sent to added Recipient's Email address: '//span[contains(.,''Email sent to:'') and contains(.,$UserEmail)]'
      This is message body for SOAP API sent to broadcast group listed with current date: >-
        (//b[contains(text(),'This is message body for SOAP API sent to
        broadcast group')])[1]
      Notification List grid: >-
        //df-card[contains(@class,'list-container')]//div[contains(@class,'flex-column')]
      Dropdown beside Responses: >-
        //df-card-title[text()='Responses']//following-sibling::div/button[contains(@class,'df-dropdown__button')]
      Conference Call Option: '//button[normalize-space(.)=''Conference Call'']'
      First Response from List: >-
        //df-card-header[df-card-title[text()='Responses']]/following-sibling::df-card-content//tr[1]
      Edit Button of Response: '//span[normalize-space(.)=''Edit'']'
      'Edit button (next to ''Prompts - All TTS, web, email, and other prompts'')': >-
        //div[contains(text(),'All TTS, web, email, and other
        prompts')]/child::button
      Prompts Popup Screen: '//h5[contains(text(),''Prompts'')]'
      'Upload (will perform validation, file will become live if validation passes) radio button': >-
        //div[contains(text(),'Upload (will perform validation, file will become
        ')]/preceding-sibling::div[contains(@class,'radio-input')]
      Locale dropdown: >-
        //label[contains(text(),'Locale')]/following::div[contains(@class,'input-text')]
      Uploading properties file succeeded popup message: '//p[contains(text(),''Uploading properties file succeeded.'')]'
      Use Prompts File Hotline Number checkbox: >-
        (//label[contains(text(),'Use Prompts File Hotline
        Number')]//following::df-checkbox[contains(@class,'checkbox')])[1]//input
      Label field (under Hotline Numbers): '//input[contains(@name,''hotlineLabel'')]'
      Voice dropdown (under Hotline Numbers): '//div[contains(text(),''Select a voice below'')]'
      Mary/English (United States) in Voice dropdown (under Hotline Numbers): '//div[contains(text(),''Mary/English (United States)'')]'
      Available Hotline Numbers dropdown: >-
        (//label[contains(text(),'Available Hotline
        Numbers')]/following::div[contains(@class,'df-select')])[1]
      A random number in Available Hotline Numbers dropdown (eg 17135685993): '//div[contains(text(),''17135685993'')]'
      Set as default hotline number checkbox: >-
        (//label[contains(text(),'Set as default hotline
        number')]/following::df-checkbox)[1]
      Add button below Set as default hotline number: '(//button[@class="btn btn-green m-1 df-button"])[2]'
      Remove button below Set as default hotline number: '(//span[@class="df-button__content" and contains(text(),''Remove'')])[2]'
      Default hotline set to en-US voice for HotlineNumberLabel: >-
        //td[contains(text(),$HotlineNumberLabel)]/ancestor::tr/td[contains(text(),'en-us')]/ancestor::tr/td[contains(text(),'true')]
      Updated customer hotline configuration: '//span[contains(text(),''- Mary/en'')]'
      Notifications popup: '//h5[text()=''Notifications'']'
      Notifications list: '//div[@class=''modal-content'']//table//td'
      Users tab is ACTIVE: '//a[normalize-space(.)=''Users''][contains(@class,''active'')]'
      Add all users button: >-
        (//thead/tr[1]//button[.//i[contains(@class,'fa-plus')][contains(@class,'fa-lg')]])[1][not(@disabled)]
      Added recipient <Fullname1>: >-
        //div[contains(@class,'df-chip__content')][normalize-space(.)=$Fullname1]
      Added recipient <Fullname2>: >-
        //div[contains(@class,'df-chip__content')][normalize-space(.)=$Fullname2]
      Added recipient <Username>: '//div[contains(@class,''df-chip__content'')][normalize-space(.)=$Username]'
      Added recipient <Fullname>: '//div[contains(@class,''df-chip__content'')][normalize-space(.)=$Fullname]'
      Added recipient For SMS: >-
        //div[contains(@class,'df-chip__content-wrapper')][normalize-space(.)='emailadmin-user']
      Use specified escalation instead of user personal escalations: >-
        //span[normalize-space(.)='Use specified escalation instead of user
        personal escalations.']
      Press 2 option in the Reponses section: >-
        //tr[contains(@class,'ng-star-inserted')][.//*[normalize-space(.)='Press
        2']]//strong
      Items per page dropdown (Escalation Group):
        type: dropdown
        open: >-
          //*[@role='tabpanel'][contains(@class,'active')]//div[@class='df-table-paginator__options__select'
          and span[contains(text(),'Items per page')]]/df-select
        value: '//df-option/div[.=''{value}'']'
      Adminuser1 in To field: >-
        //div[contains(@class,"df-chip__wrapper")]/div[contains(text(),"adminuser1")]
      TeamLeaderName in To field: >-
        //div[contains(@class,"df-chip__wrapper")]//div[contains(text(),$TeamLeaderName)]
      TeamLeaderName in Name column: >-
        //td[contains(@data-header,"Name") and contains(text(),$TeamLeaderName)]
    name: Notifications
  - selectors:
      Phone number in the Update Cell Phone Number page: '//input[@autoComplete=''phoneNumber'']'
      Save button in the Update Cell Phone Number page: '//button[normalize-space(.)=''Save'']'
      Notification Filter Options button in the Run Report page: '//button[normalize-space(.)=''Notification Filter Options'']'
      Criteria Filters section in the Criteria Editor page: '//df-card-title[normalize-space(.)=''Criteria Filters'']'
      Sent Time after field in Criteria Filters section: >-
        //td[@data-header='Criteria'][contains(normalize-space(.),'Sent Time
        after')]
      Sent Time before field in Criteria Filters section: >-
        //td[@data-header='Criteria'][contains(normalize-space(.),'Sent Time
        before')]
      Delete button in the Criteria Filters section: '//button[normalize-space(.)=''Delete'']'
      Default Filter Criteria Deletion is not allowed: >-
        //p[normalize-space(.)='Default Filter Criteria Deletion is not
        allowed']
      Edit button in the Criteria Filters section: '//button[normalize-space(.)=''Edit'']'
      Edit Criteria dialog: >-
        //div[contains(@class,'modal-dialog')][.//*[normalize-space(.)='edit
        Criteria']]
      One day before the currently selected date of the Value date picker in the Edit Criteria dialog if DISPLAYED: >-
        (//button[contains(@class,'df-datepicker__date')][not(@disabled or
        contains(@class,'selected'))])[last()]
      One day before the currently selected date of the Value date picker in the Edit Criteria dialog: >-
        (//button[contains(@class,'df-datepicker__date')][not(@disabled or
        contains(@class,'selected'))])[last()]
      One day after the currently selected date of the Value date picker in the Edit Criteria dialog: >-
        //div[./button[contains(@class,'df-datepicker__date')][contains(@class,'selected')]]/following-sibling::div[1]/button[not(@disabled)]
      Previous button or One day before the currently selected date of the Value date picker in the Edit Criteria dialog: >-
        (//div[./button[contains(@class,'df-datepicker__date')][contains(@class,'selected')]]/preceding-sibling::div[1]/button[not(@disabled)]|//button[contains(@class,'previous')])[last()]
      Next button or One day after the currently selected date of the Value date picker in the Edit Criteria dialog: >-
        (//div[./button[contains(@class,'df-datepicker__date')][contains(@class,'selected')]]/following-sibling::div[1]/button[not(@disabled)]|//button[contains(@class,'next')])[last()]
      One day after the currently selected date of the Value date picker in the Edit Criteria dialog or First day of next month: >-
        (//div[./button[contains(@class,'df-datepicker__date')][contains(@class,'selected')]]/following-sibling::div[1]/button[not(@disabled)]|//div[./button[contains(@class,'df-datepicker__date')][./span[text()='01']]])[last()]
      Save button in the Edit Criteria dialog: >-
        //div[contains(@class,'modal-dialog')]//button[normalize-space(.)='Save']
      Permissible Date Range Limit error: >-
        //p[contains(normalize-space(.),'Permissible Date Range Limit is 90
        days')]
      Total Reponses is '1 of 2 (50%)': >-
        //label[normalize-space(.)='Total
        Responses']//following-sibling::div[normalize-space(.)='1 of 2 (50%)']
      0-5 minutes is '1 of 2 (50%)': >-
        //div[./span[normalize-space(.)='0-5
        minutes:']][contains(normalize-space(.),'1 of 2 (50%)')]
      Total Reponses is '2 of 2 (100%)': >-
        //label[normalize-space(.)='Total
        Responses']//following-sibling::div[normalize-space(.)='2 of 2 (100%)']
      5-10 minutes is '1 of 2 (50%)': >-
        //div[./span[normalize-space(.)='5-10
        minutes:']][contains(normalize-space(.),'1 of 2 (50%)')]
      View Details button in the View Notification: '(//button[normalize-space(.)=''View Details''])[1]'
      Second View Details button in the View Notification: '(//button[normalize-space(.)=''View Details''])[2]'
      View Details button corresponding to '0-5 minutes': >-
        //div[@class='row'][contains(normalize-space(.),'0-5
        minutes')]//button[normalize-space(.)='View Details']
      View Details button corresponding to '5-10 minutes': >-
        //div[@class='row'][contains(normalize-space(.),'5-10
        minutes')]//button[normalize-space(.)='View Details']
      Respond On-Behalf-Of button: '//button[normalize-space(.)=''Respond On-Behalf-Of'']'
      Modal Dialog title: >-
        //div[contains(@class,'modal-content')]//*[contains(@class,'modal-title')]
      First User who confirmed the notification: >-
        (//div[contains(@class,'all-recipient-table-wrap')][./*[contains(normalize-space(.),'Recipients')]]//tr[./td[@data-header='Status'][normalize-space(.)='Work
        Email: Work EmailConfirmed with response
        Confirmed']]/td[@data-header='Name'])[1]
      Last User who confirmed the notification: >-
        (//div[contains(@class,'all-recipient-table-wrap')][./*[contains(normalize-space(.),'Recipients')]]//tr[./td[@data-header='Status'][normalize-space(.)='Work
        Email: Work EmailConfirmed with response
        Confirmed']]/td[@data-header='Name'])[last()]
      Response is confirmed in the Result Log: >-
        //div[contains(@class,'all-recipient-table-wrap')][./*[contains(normalize-space(.),'Result
        Log')]]//tr[./td[normalize-space(.)='Work Email: Work EmailConfirmed
        with response Confirmed']]
      First entry in the Result Log: >-
        (//div[contains(@class,'all-recipient-table-wrap')][./*[contains(normalize-space(.),'Result
        Log')]]//tr[not(normalize-space(.)='Work Email')]/td[2])[1]
      Last entry in the Result Log: >-
        (//div[contains(@class,'all-recipient-table-wrap')][./*[contains(normalize-space(.),'Result
        Log')]]//tr[not(normalize-space(.)='Work Email')]/td[2])[last()]
      Response dropdown in the Select on-behalf-of response dialog: '//df-select[@name=''responses'']'
      I confirm that I have received this message option of the Response dropdown: >-
        //df-option[normalize-space(.)='I confirm that I have received this
        message.']
      <Fullname1> under the Name column in the Response table: '//td[@data-header=''Name''][normalize-space(.)=$Fullname1]'
      <Fullname2> under the Name column in the Response table: '//td[@data-header=''Name''][normalize-space(.)=$Fullname2]'
      first confirmed used under the Name column in the Response table: '(//td[@data-header=''Name''][contains(.,$FirstConfirmedUser)])[1]'
      second confirmed used under the Name column in the Response table: '(//td[@data-header=''Name''][contains(.,$SecondConfirmedUser)])[1]'
      first unconfirmed used under the Name column in the Response table: '(//td[@data-header=''Name''][not(contains(.,$FirstConfirmedUser))])[1]'
      Bridge to conference call On radio button: >-
        //div[@class='form-group row'][contains(normalize-space(.),'Bridge to
        conference call')]//df-radio-input[@value='on']
      Bridge to conference call Off radio button: >-
        //div[@class='form-group row'][contains(normalize-space(.),'Bridge to
        conference call')]//df-radio-input[@value='off']
      Response Editor dialog: >-
        //div[contains(@class,'modal-content')]//*[contains(@class,'modal-title')][normalize-space(.)='Response
        Editor']
      Bridge to conference call value is 'On': '//p[normalize-space(.)=''Bridge to conference call: On'']'
      Cell Phone Response is confirmed in the Result Log: >-
        //div[contains(@class,'all-recipient-table-wrap')][./*[contains(normalize-space(.),'Result
        Log')]]//tr[./td[normalize-space(.)='Cell Phone: Cell PhoneConfirmed
        with response Confirmed']]
      user Name cell (in Users tab): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr//td[contains(@data-header,'Name')][normalize-space(text())=$UserName])[1]
      added user (in Sent Notification > Users - Right): >-
        (//div[contains(@class,'col-12')][not(.//af-user-list)]//table//td[@data-header='Name'][normalize-space(.)=$UserName])[1]
      user added for a second time (in Sent Notification > Users - Right): >-
        (//div[contains(@class,'col-12')][not(.//af-user-list)]//table//td[@data-header='Name'][normalize-space(.)=$UserName])[2]
      added group (Launch Center > Recipient Editor > Broadcast Group - Right): >-
        //div[contains(@class,'col-12')][not(.//af-user-list)]//table//td[@data-header='Name'][normalize-space(.)=$GroupName]
      added group (Launch Center > Recipient Editor > Escalation Group - Right): >-
        //div[contains(@class,'col-12')][not(.//af-group-picker)]//table//td[@data-header='Name'][normalize-space(.)=$EscalationGroupName]
      group added for a second time (Launch Center > Recipient Editor > Escalation Group - Right): >-
        (//div[contains(@class,'col-12')][not(.//af-group-picker)]//table//td[@data-header='Name'][normalize-space(.)=$EscalationGroupName])[2]
      Broadcast Groups List (Launch Center > Recipient Editor > Broadcast Group): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//table
      First non-picked group Name cell (Launch Center > Recipient Editor > Broadcast Group): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr[not(contains(@class,'picked'))])[1]//td[contains(@data-header,'Name')]
      group Name cell (Launch Center > Recipient Editor > Broadcast Group): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr//td[contains(@data-header,'Name')][normalize-space(text())=$GroupName]
      group added for a second time (Launch Center > Recipient Editor > Broadcast Group - Right): >-
        (//div[contains(@class,'col-12')][not(.//af-user-list)]//table//td[@data-header='Name'][normalize-space(.)=$GroupName])[2]
      Escalation Groups List (Launch Center > Recipient Editor > Escalation Group): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//table
      First non-picked group Name cell (in Escalation Groups > Escalation Group): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr[not(contains(@class,'picked'))])[1]//td[contains(@data-header,'Name')]
      group Name cell (Launch Center > Recipient Editor > Escalation Group): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr//td[contains(@data-header,'Name')][normalize-space(text())=$EscalationGroupName]
      Smart Groups List (Launch Center > Recipient Editor > Smart Group): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//table
      First non-picked group Name cell (Launch Center > Recipient Editor > Smart Group): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr[not(contains(@class,'picked'))])[1]//td[contains(@data-header,'Name')]
      group Name cell (Launch Center > Recipient Editor > Smart Group): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr//td[contains(@data-header,'Name')][normalize-space(text())=$SmartGroupName]
      added group (Launch Center > Recipient Editor > Smart Group - Right): >-
        //div[contains(@class,'col-12')][not(.//af-group-picker)]//table//td[@data-header='Name'][normalize-space(.)=$SmartGroupName]
      group added for a second time (Launch Center > Recipient Editor > Smart Group - Right): >-
        (//div[contains(@class,'col-12')][not(.//af-group-picker)]//table//td[@data-header='Name'][normalize-space(.)=$SmartGroupName])[2]
      To field (Launch Center > Compose Notification): >-
        //label[normalize-space(text())='To']//following-sibling::div[contains(.,'Select
        Recipient')]
      Sent Notifications - View Notification - Original Recipients Names: '//td[@data-header=''Name'']'
    name: Sent Notifications
  - selectors:
      I confirm that I have received this message radio button: >-
        //div[contains(@class,'df-radio-input')][normalize-space(.)='I confirm
        that I have received this message.']
      You have confirmed the message: '//df-card-content[normalize-space(.)=''You have confirmed the message.'']'
    name: Confirmation page
  - selectors:
      Save (in Edit Criteria): '(//span[contains(text(),''Save'')])[3]'
    name: Edit Criteria
  - selectors:
      Save (in Criteria Editor): '(//span[contains(text(),''Save'')])[2]'
      Name equals user1 Criteria Filter: >-
        //af-filter-criterion-view[ strong[.='Name'] and
        span[contains(.,'equals')] and span[2][.=' user1 ']]
    name: Criteria Editor
  - selectors:
      Response Editor dialog: >-
        //div[@class='modal-content'][contains(normalize-space(.),'Response
        Editor')]
    name: Response Editor dialog
  - selectors:
      Save (in Edit Group Details): '(//span[contains(text(),''Save'')])[1]'
      Save (in Create Group Details): '(//span[contains(text(),''Save'')])[1]'
    name: Create/Edit Group Details
  - selectors:
      Work Email cell in the Custom Escalation list: >-
        //df-card[contains(normalize-space(.),'Custom
        Escalation')]//td[normalize-space(.)='Work Email']
      Work Email cell in the Device list: >-
        //df-card[contains(normalize-space(.),'Device
        list')]//td[normalize-space(.)='Work Email']
      Work Smart Phone cell in the Device list: >-
        //df-card[contains(normalize-space(.),'Device
        list')]//td[normalize-space(.)='Work Smart Phone']
      Cell Phone cell in the Device list: >-
        //df-card[contains(normalize-space(.),'Device
        list')]//td[normalize-space(.)='Cell Phone']
      Work Smart Phone cell in the Custom Escalation list: >-
        //df-card[contains(normalize-space(.),'Custom
        Escalation')]//td[normalize-space(.)='Work Smart Phone']
    name: Escalator Editor
  - selectors:
      Escalation Groups in left menu: '//a[contains(text(),''Escalation Groups'')]'
      Escalation Group list: '//a[contains(text(),''Groups List'')]'
      First Esclation Group: '(//td[contains(text(),''escalation-group'')])[1]'
      Escalation Group starting with letter: '//td[contains(text(),''escalation-group'')][starts-with(text(),$letter)]'
      Escalation Group NOT starting with letter: >-
        //td[contains(text(),'escalation-group')][not(starts-with(text(),$letter))]
      View Details button: '//span[contains(text(),''View Details'')]'
      View Details button in Viewing User dialog: >-
        //div[contains(@class,'modal')]//button[span[contains(text(),'View
        Details')]]
      Group Details Tab: '//a[@id=''details'']'
      Group Membership Tab: '//div[contains(text(),''Group Membership'')]'
      Manage Membership button: '//span[contains(text(),''Manage Membership'')]'
      first name in users list: >-
        (//ul[contains(.,'Users')]//following-sibling::div//td[@data-header='Name'])[1]
      Plus button for the user: '(//td)[1]/following::i[1][@class=''fa fa-plus'']'
      Add Delay button: '//span[contains(text(),''Add Delay'')]'
      Delay (minutes) text box: '//b[contains(text(),''Delay (minutes):'')]/following::input'
      Save button for delay: '(//span[contains(text(),''Save'')])[1]'
      Selected User in right panel: >-
        (//ul[@role='tablist'][contains(@class,'nav')])[2]//following-sibling::div//td[@data-header='Name'][normalize-space(.)=$userName
        or normalize-space(.)=$UserName]
      Selected User in right panel - Minus Icon: '//*[*[span[contains(text(),$UserName)]]]//i[contains(@class,''fa-minus'')]'
      After 5 minute(s) escalate to: '//span[contains(text(),''After 5 minute(s) escalate to'')]'
      Selected user present twice before and after delay in right panel: >-
        //span[contains(text(),$userName)]/following::span[contains(text(),'After
        5 minute(s) escalate to')]/following::span[contains(text(),$userName)]
      Back to Escalation Groups: '//span[contains(text(),''Back to Escalation Groups'')]'
      Search input span: '//span[contains(@class,''search-input'')]'
      New Button on Escalation Group Page: '//span[contains(text(),''New'')]'
      Selected User in right panel twice: '(//span[contains(text(),$UserName)])[2]'
      'You have entered duplicates records in one block, Duplicate records are removed': >-
        //p[text()=' You have entered duplicates records in one block (between
        two delays). Duplicate records are removed. ']
      Escalation group details: '//a[contains(text(),''View Details'')]'
      Show Disabled button: '//button/span[contains(text(),''Show Disabled'')]'
      unselected Show Disabled button: >-
        //button[not(contains(@class,'selected'))][normalize-space(.)='Show
        Disabled']
      Enable button (in Viewing User modal): '//ngb-modal-window//button[normalize-space(.)=''Enable'']'
      Disable button (in Viewing User modal): '//ngb-modal-window//button[normalize-space(.)=''Disable'']'
      Selected Escalation Group in table: '//td[@data-header="Name" and text()=''escalation-group2-no-delay'']'
      Escalation Group in right panel: '//td[@data-header=''Type'' and contains(text(),''Escalation'')]'
      Escalation group list: '(//div[contains(@role,''tabpanel'')])[3]'
      Total Count in Pagination: '//div[contains(@class,''df-table-paginator__options__total'')]//span'
      Created User in User List In Group membership: '//td[@data-header=''Name'' and contains(text(),$userName)]'
    name: Escalation Groups
  - selectors:
      Smart Group Item: '//td[@data-header=''Name''][text()=$SmartGroupName]'
      Group Name Value (in Smart Groups): >-
        (//label[contains(text(),'Group Name')]//following::div[@class='col
        item-value'])[1]
      Delete (in Smart Groups): '//span[contains(text(),"Delete")]'
      Smart Group list: '(//div[contains(@role,''tabpanel'')])[4]'
      Smart Group in the Right Panel: '//td[@data-header=''Type'' and contains(text(),''Smart'')]'
      Name Option in Field Name: '//div[contains(@class,''ng-star-inserted'') and contains(text(),''Name'')]'
      Contains Option in Operator: '//div[contains(text(),''contains'')]'
      Users List with selected criteria: '(//td[contains(text(),''Leader'')])[1]'
      Smart Group created with Custom field: '//div[contains(text(),''Enabled'')]'
    name: Smart Groups
  - selectors:
      Data Management Settings Section: >-
        (//*[contains(@class,'section__sub-header')][text()='Data Management
        Settings']//following::div)[1]
      Configure (in Data Management Settings Section): >-
        (//*[contains(@class,'section__sub-header')][text()='Data Management
        Settings']//following::h5)[1]//button[contains(text(),"Configure")]
      Edit (in Data Management Settings Section): >-
        (//*[contains(@class,'section__sub-header')][text()='Data Management
        Settings']//following::h5)[1]//button[contains(text(),'Edit')]
      Import (in Data Management Settings Section): >-
        (//*[contains(@class,'section__sub-header')][text()='Data Management
        Settings']//following::h5)[1]//button[contains(text(),'Import')]
      Restore Backup (in Data Management Settings Section): >-
        (//*[contains(@class,'section__sub-header')][text()='Data Management
        Settings']//following::h5)[1]//button[contains(text(),'Restore Backup')]
      Manage ADMT Configuration Files: '//h5[text()=''Manage ADMT Configuration Files'']'
      file name (in ADMT Roaster Configuration Files table): >-
        //div[./h5[contains(text(),'ADMT Roaster Configuration Files')]]
        //table//td[@data-header='File Name'][contains(.,$fileName)]
    name: Data Management Settings
  - selectors:
      Import Data: '//h5[text()=''Import Data'']'
      Take Auto Backup Checkbox: '//input[@name=''backup'']'
      Notify Support Checkbox: '//input[@name=''notifySupport'']'
      Save (in Import Data): '//button[@type=''submit''][not(@disabled='''')]'
      Notification Emails (in Import Data): '//af-customer-import//input[@type=''text'']'
      Commit to database (in Import Data): '//input[@name=''commit'']'
      Notify support if successful completion? (in Import Data): '//input[@name=''notifySupport'']'
      Choose File (in Import Data): '//input[@type="file"]'
    name: Import Data
  - selectors:
      Restore Backup (in Restore Last Backup): >-
        //div[@class='modal-content' and
        .//*[@class='modal-title'][contains(text(),'Restore Last
        Backup')]]//span[contains(text(),'Restore Backup')]
    name: Restore Last Backup
  - selectors:
      Report Lists: '//a[text()='' Report Lists '']'
      Report Lists link in the Sidebar: '//a[text()='' Report Lists '']'
      Devices Report (in Left Menu): '//a[contains(text(),''Devices Report'')]'
      Report Modal: '//div[@class="d-flex flex-column ng-star-inserted"]'
      Edit: '//span[contains(text(),''Edit'')]'
      User Filter Options: '//span[contains(text(),'' User Filter Options '')]'
      New - Criteria Filters: '//i[@class=''fa fa-plus'']'
      Value: '//input[@name=''value'']'
      Save: '(//span[contains(text(),''Save'')])[1]'
      CSV Report (MS Excel): '//div[contains(text(),''CSV Report (MS Excel)'')]'
      Pending and Completed Reports: '//a[@id=''pending-reports'']'
      Pending and Completed Reports tab: '//a[@id=''pending-reports'']'
      Pending and Completed Reports section: '//div[contains(text(),''Report Type'')]'
      Report List: //df-card
      Others: '//div[text()='' Others '']'
      Run Report - User List Report: '//df-card-title[text()=''User List Report'']/following-sibling::button'
      Run Report: '//span[text()='' Run Report '']'
      Run Report - Hotline Pro Call Details: >-
        //df-card-title[text()='Hotline Pro Call
        Details']/following-sibling::button
      Run Report - Team Leadership Report: >-
        //df-card-title[text()='Team Leadership
        Report']/following-sibling::button
      Run Report button of User List Report: >-
        //df-card-title[text()='User List
        Report']//following-sibling::button/span[text()='Run Report']
      Run Report - Sent Notification Summary: >-
        //df-card-title[text()='Sent Notification
        Summary']/following-sibling::button
      Period: '//div[text()='' Last Full Month '']'
      Period dropdown (in Report Lists):
        type: dropdown
        open: '//label[normalize-space(.)=''Period'']/following-sibling::div//df-select'
        value: '//df-option[normalize-space(.)=''{value}'']'
      Refresh: '//i[@class=''fa fa-refresh'']'
      QA Test User: '//*[contains(text(),''QA Test User'')]'
      list of users including adminuser1: '(//a[contains(@href,''report-list'')][contains(text(),''adminuser1'')])[1]'
      adminuser1: '//a[contains(@href,''report-list'')][contains(text(),''adminuser1'')]'
      User List Report with Completed status: >-
        //td[contains(text(),'User List
        Report')]/following-sibling::td[contains(text(),'Complete')]
      This report run has been initiated Please refresh Pending and Completed Reports list to view/download report: '//p[@class=''ng-star-inserted'']'
      Save - Edit Criteria: '//button[@class=''df-button'']//i[@class=''fa fa-save'']'
      Save Criteria filter button: '//i[@class=''fa fa-save'']'
      Select device dropdown (in Devices Report page):
        type: dropdown
        open: >-
          //df-select[@placeholder='Select
          device']//div[@class='df-select__input-text']
        value: '//df-option/div[contains(text(),$DeviceOption)]'
      Name cell (in Devices Report page): '//td[@data-header="Name"]/a[contains(text(),$Fullname)]'
      Download button (in Devices Report page): '//button/span[contains(text(),''Download'')]'
      Show Disabled button (in Devices Report page): '//button/span[contains(text(),''Show Disabled'')]'
      Report Lists Page: '//h1[contains(text(),''Report Lists'')]'
      CSV Report radio Button: >-
        //div[contains(text(),'CSV
        Report')]//parent::label//div[contains(@id,'radio-outer-df-radio')]
      User List Report in Table: '(//tr[td[text()=''User List Report''] and td[text()=''csv'']])[1]'
      User List Report with Statue Complete in Table: >-
        (//tr[td[text()='User List Report'] and td[text()='csv'] and
        td[text()='Complete']])[1]
      Download button on User List Report Page: '//span[contains(text(),''Download'')]'
      User List Report report download is in progress Message: '//p[contains(text(),''User List Report report download is in progress'')]'
      Report Template tab: '//a[text()='' Report Template'']'
      My Reports tab: '//a[text()='' My Reports'']'
      Report Type - Team Leadership Report: '//div[text()='' Team Leadership Report '']'
      Copy To My Reports button: '//span[text()=''Copy To My Reports'']'
      Report Name: '//input[@name=''name'']'
      Save Report button: '//span[text()='' Save Report '']'
      Disabled Save Report button: '//button[@disabled][contains(.,''Save Report'')]'
      Save and Run Report button: '//span[text()='' Save and Run Report '']'
      Disabled Save and Run Report button: '//button[@disabled][contains(.,''Save and Run Report'')]'
      Report Name added in the table: '//td[normalize-space(text())=$ReportName]'
      Report Name added in the table or Next Page button in pagination: >-
        (//td[text()=$ReportName]|//button[contains(@class,'paginator')][./i[contains(@class,'caret-right')]])[last()]
      Report Name with Complete status added in the table: >-
        //tr[.//td[normalize-space(text())=$ReportName]][.//td[@data-header='Status'][text()='Complete']]
      Device Report List page: '//a[text()='' Device Report List '']'
      Run Report button of Notification Response Details: >-
        //df-card-title[text()='Notification Response
        Details']//following-sibling::button/span[text()='Run Report']
      Run Report button of Event Log Summary: >-
        //df-card-title[text()='Event Log
        Summary']//following-sibling::button/span[text()='Run Report']
      Notification Response Details template: '//div[contains(text(),''Notification Response Details'')]'
      Run Report Screen: '//a[contains(text(),''Run Report'')]'
      Download Button: '//span[contains(text(),''Download'')]'
      Complete Status corresponding to newly created report: '//td[text()=$ReportName]/following::td[contains(text(),''Complete'')][1]'
      Usage Summary reports under Usage Section: >-
        //df-card-title[contains(@class,'df-card__title') and (text()='Usage
        Summary')]
      Run Report Button for Usage Summary: >-
        //df-card-title[contains(@class,'df-card__title') and (text()='Usage
        Summary')]/following::button[1]
      PDF Report option for Generate Report As: '//div[contains(text(),''PDF Report'')]'
      Period Dropdown: '//label[contains(text(),''Period'')]/following::df-select[1]'
      Today option in Period Dropdown: '//df-option[@value=''TODAY'']'
      EventType Dropdown: '//label[contains(text(),''EventType'')]/following::df-select[1]'
      User Email or Name Updated option in EventType Dropdown: '//df-option[div[contains(text(),''User Email/Name Updated'')]]'
      Smart Contact Updated option in EventType Dropdown: '//df-option[div[contains(text(),''Smart Contact Updated'')]]'
      User Device Updated option in EventType Dropdown: '//df-option[div[contains(text(),''User Device Updated'')]]'
      Report run has been initiated message: '//p[contains(text(),''This report run has been initiated'')]'
      Report Type of First Row of Pending and Completed Reports table: >-
        //table[contains(@class,'df-table
        df-table--responsive')]//tr[2]/td[@data-header='Report Type']
      Status of First Row of Pending and Completed Reports table: >-
        //table[contains(@class,'df-table
        df-table--responsive')]//tr[2]/td[@data-header='Status']
      Success message Usage Summary report download is in progress: '//p[contains(text(),''Usage Summary report download is in progress.'')]'
      Last 12 Full Months option in Period Dropdown: '//div[contains(text(),''Last 12 Full Months'')]'
      Run Report Button for Sent Notification Detail + Recipient Custom Fields: >-
        //df-card-title[contains(@class,'df-card__title') and (text()='Sent
        Notification Detail + Recipient Custom Fields')]/following::button[1]
      Sent Notification Detail + Recipient Custom Fields template: >-
        //div[contains(text(),'Sent Notification Detail + Recipient Custom
        Fields')]
      Sent Notification Detail + Recipient Custom Fields template in the Report List page: >-
        //df-card-title[normalize-space(.)='Sent Notification Detail + Recipient
        Custom Fields']
      Run Report button of the Sent Notification Detail + Recipient Custom Fields template: >-
        //df-card-title[normalize-space(.)='Sent Notification Detail + Recipient
        Custom Fields']/following-sibling::button[normalize-space(.)='Run
        Report']
      All My Reports templates listed: '//table[contains(@class,''df-table df-table'')]'
      Icon to goto Last Page: '//i[@class="fa fa-step-forward"]'
      Last Row in Table: '//table[contains(@class,''df-table df-table'')]//tr[last()]/td[2]'
      Send Reminder Button: '//span[contains(text(),''Send Reminder'')]'
      Send Reminder Screen: '//a[contains(text(),''Send Reminder'')]'
      x on Report Users button: '//i[contains(@class,''df-chip-remove fa fa-times-circle ng-star'')]'
      Report Users: '//div[contains(text(),''Report Users'')]'
      All Reports Template: '//div[@id=''report-templates-panel'']'
      Run Report at Bottom: '//span[normalize-space(text())=''Run Report'']'
      View Report Usage Summary Popup: '//h5[normalize-space(text())="View Report: Usage Summary"]'
      All User Count: '//td[@aria-label="All User Count"]/p'
      Enabled User Count: '//td[@aria-label="Enabled User Count"]/p'
      Close Button of Popup: '//span[normalize-space(text())=''Close'']'
      View Report User List Report Popup: '//h5[normalize-space(text())="View Report: User List Report"]'
      Account Management (under Usage section): '//df-card-title[contains(text(),''Account Management'')]'
      Run Report button for Account Management Report: >-
        //df-card-title[contains(text(),'Account
        Management')]/following-sibling::button
      'popup that contains ''This report run has been initiated, Please refresh''': >-
        //p[contains(text(),'This report run has been initiated, Please
        refresh')]
      Report Type Column Value at top of queue/list: '//tbody/tr[2]/td[3]'
      Status Value of Account Management report: >-
        //td[@data-header="Report Type" and contains(text(),'Account
        Management')]/ancestor::tbody/tr[2]/td[5]
      Row of latest Account Management report: >-
        (//td[@data-header="Report Type" and contains(text(),'Account
        Management')])[1]
      Download Success message- 'Account Management report download is in progress': >-
        //p[contains(text(),'Account Management report download is in
        progress.')]
    name: Reports
  - selectors:
      Users: '//a[text()='' Users '']'
      Users section: '//af-user[.//h1[.=''Users '']]'
      User list: //af-user//table
      User in users list: '//td[contains(text(),$user_Name)][@aria-label=''Name'']'
      User Role: >-
        //td[contains(text(),$user_Name)][@aria-label='Name']/following-sibling::td[@aria-label='Role']
      User Default Email: >-
        //td[contains(text(),$user_Name)][@aria-label='Name']/following-sibling::td[@aria-label='Default
        Email']
      User Description: >-
        //td[contains(text(),$user_Name)][@aria-label='Name']/following-sibling::td[@aria-label='Description']
      name: '//input[@name=''name'']'
      email: '//input[@name=''emailAddress'']'
      Devices: '//a[@aria-controls=''devices-panel'']'
      Cell Phone: '//td[text()=''Cell Phone '']'
      Device Phone Number: '//input[@name=''otherPhoneNumber'']'
      Cell Phone Current Value: '//*[td[text()=''Cell Phone '']]/td[@data-header="Current Value"]'
      Cell Phone (disabled): '//td[text()=''Cell Phone (disabled)'']'
      UserName: '//input[@aria-label=''UserName'']'
      User list page: '//a[contains(text(),'' User List '')]'
      Big plus icon: '//i[@class=''fa fa-plus fa-lg'']'
      New user button: '//i[@class=''fa fa-plus-circle'']'
      New button in Users page: '//button[.//span[contains(.,''New'')]]'
      Add new user screen: '//h5[@class=''modal-title''][contains(text(),'' Add User '')]'
      Edit Configure button (View User popup): >-
        //button[@class='btn btn-black
        df-button']//span[@class='df-button__content'][contains(text(),'Edit')]
      Phone Number textbox (View User popup): '//af-us-phone-number[@name=''usNumber'']//input'
      Edit Standard Phone Device header: '//h5[contains(text(),''Edit Standard Phone Device'')]'
      Edit Standard SMS Device header: '//h5[contains(text(),''Edit Standard SMS Device'')]'
      Standard email device textfield: '//input[@id=''deviceEmail'']'
      Save button (View User popup): '//span[contains(text(),''Save'')]'
      Full Name field: '//input[@name=''name'']'
      Primary Email Address: '//input[@name=''emailAddress'']'
      Map Default Email To dropdown:
        type: dropdown
        open: '//df-select[@name=''mapEmailToDevice'']'
        value: '//df-option[normalize-space(.)=''{value}'' or contains(.,''{value}'')]'
      Add button: '//span[contains(text(),''Add'')]'
      Username: '//input[@aria-label="UserName"]'
      Ok button on Username: '//span[contains(text(),''Ok'')]'
      Ok button (in Add Username): '//span[contains(text(),''Ok'')]'
      Select a domain (in Add Username): >-
        //df-select[@placeholder='Select a
        domain']//div[contains(@class,'text-truncate')]
      Added username: >-
        //div//td[@data-header='Username' or
        @data-header='Name'][(normalize-space(text())=$Username) or
        (normalize-space(text())=$UserName)]
      Added username (in Add User dialog): >-
        //form[.//*[contains(.,'Add
        User')]]//td[@data-header='Username'][contains(text(),$Username)]
      Administrator role: '//df-radio-group[@name=''role'']//df-radio-input[@class=''df-radio-input'']'
      Generate password checkbox: '//input[@name="generatePassword"]'
      New password: '//input[@name="password"]'
      Confirm Password: '//input[@name="confirmPassword"]'
      User save button: '//i[@class=''fa fa-save'']'
      Save button (in Add User): '//button[not(@disabled='''')]//span[contains(.,''Save'')]'
      Administrator radiobutton (in Add User): >-
        //df-radio-group[@name='role']//df-radio-input[@class='df-radio-input']//div[@class='df-radio-input__outer-circle']
      Delete button (in User List): '//button[not(@disabled='''')]//span[contains(.,''Delete'')]'
      Viewing User dialog: '//div[@class=''modal-content''][.//af-user-view]'
      Teams Tab in Viewing User dialog: '//li/a[@id=''teams'']'
      Edit Button in dialog: '//div[contains(@class,''modal'')]//button/span[contains(text(),''Edit'')]'
      View Permissions button: '//button[span[contains(text(),''View Permissions'')]]'
      Permissions On Team Global screen: '//h5[text()='' Permissions On Team Global '']'
      Team Information section: '//h5[contains(text(),''Team Information'')]'
      Leaders section: '//h5[contains(text(),''Leaders'')]'
      Members section: '//h5[contains(text(),''Members'')]'
      Sub-Teams section: '//h5[contains(text(),''Sub-teams'')]'
      Viewing Team - Global screen: '//h5[contains(text(),''Viewing Team: Global'')]'
      Pagination bar in Administrators section: >-
        //h5[contains(text(),'Administrators')]//following-sibling::section[1]//df-table-paginator
      Items per page dropdown in Administrators section: >-
        //h5[contains(text(),'Administrators')]//following-sibling::section[1]//df-table-paginator//df-select
      Page count in Administrators section: >-
        //h5[contains(text(),'Administrators')]//following-sibling::section[1]//df-table-paginator//span[contains(text(),'of')]
      Option 5 in Items per page dropdown: '//df-option/div[text()=''5'']'
      Next Page icon in pagination bar in Administrators section: >-
        //h5[contains(text(),'Administrators')]//following-sibling::section[1]//df-table-paginator//i[contains(@class,'right')]
      Page number in pagination bar in Administrators section: >-
        //h5[contains(text(),'Administrators')]//following-sibling::section[1]//df-table-paginator//input
      Pagination bar in Leaders section: >-
        //h5[contains(text(),'Leaders')]//following-sibling::section[1]//df-table-paginator
      Pagination bar in Sub-Teams section: >-
        //h5[contains(text(),'Sub-teams')]//following-sibling::section[1]//df-table-paginator
      Permissions for regularuser2: >-
        //tbody//tr[td//a[contains(text(),'regularuser2')]]//td//i[not(contains(@class,'user'))]
      Disabled Permissions for regularuser2: >-
        //tbody//tr[td//a[contains(text(),'regularuser2')]]//td//i[contains(@class,'danger')]
      Close button in Viewing Team screen: >-
        //div[div/af-team-view/section/h5[contains(text(),'Viewing
        Team')]]//span[contains(text(),'Close')]
      Close button in Viewing User screen: >-
        //div[div/af-user-view/section/h5[contains(text(),'Viewing
        User')]]//span[contains(text(),'Close')]
      Edit button in Viewing User screen: '//af-user-overview//button/span[contains(text(),''Edit'')]'
      Close button at the bottom right: '//span[contains(text(),''Close'')]'
      + icon for Global in Teams List: '//tr[td/a[contains(text(),''Global'')]]//i[contains(@class,''expand'')]'
      Details button: '//span[contains(text(),''Details'')]'
      View Team page: '//a[contains(@class,''breadcrumbs'') and contains(text(),''View Team'')]'
      Administrators section: '//h5[contains(text(),''Administrators'')]'
      Team Greeting section: '//h5[contains(text(),''Team Greeting'')]'
      '''The global team contains all users and global groups'' message in Members section': >-
        //h5[contains(text(),'Members')]//following::div[contains(text(),'The
        global team contains all users and global groups')]
      Green tick under 'VP' (View Private User Data) for regularuser2 in Leaders section: >-
        //tbody[tr/td/a[contains(text(),'regularuser2')]]//td[@data-header='VP']/i[contains(@class,'fa-check
        green')]
      '''Global'' in Teams List': '//tr/td/a[contains(text(),''Global'')]'
      Send Notification checkbox in Permissions: '//label[span[contains(text(),''Send Notification'')]]/input'
      View Results checkbox in Permissions: '//label[span[contains(text(),''View Results'')]]/input'
      Cancel Notification checkbox in Permissions: '//label[span[contains(text(),''Cancel Notification'')]]/input'
      Manage Templates checkbox in Permissions: '//label[span[contains(text(),''Manage Templates'')]]/input'
      Open From Template checkbox in Permissions: '//label[span[contains(text(),''Open From Template'')]]/input'
      View Template checkbox in Permissions: '//label[span[contains(text(),''View Template'')]]/input'
      Manage Sub-teams checkbox in Permissions: '//label[span[contains(text(),''Manage Sub-teams'')]]/input'
      Manage Groups checkbox in Permissions: '//label[span[contains(text(),''Manage Groups'')]]/input'
      Manage Public User Data checkbox in Permissions: '//label[span[contains(text(),''Manage Public User Data'')]]/input'
      View Private User Data checkbox in Permissions: '//label[span[contains(text(),''View Private User Data'')]]/input'
      Manage Private User Data checkbox in Permissions: '//label[span[contains(text(),''Manage Private User Data'')]]/input'
      Manage Access checkbox in Permissions: '//label[span[contains(text(),''Manage Access'')]]/input'
      Manage Hotlines checkbox in Permissions: '//label[span[contains(text(),''Manage Hotlines'')]]//input'
      Manage Permissions checkbox in Permissions: '//label[span[contains(text(),''Manage Permissions'')]]/input'
      View Web Reports checkbox in Permissions: '//label[span[contains(text(),''View Web Reports'')]]/input'
      Permissions denied: '//i[contains(@class, ''fa-times'')][contains(@class, ''red'')]'
      Permissions approved: '//i[contains(@class, ''fa-check'')][contains(@class, ''green'')]'
      Permissions approved for permission: >-
        //*[i[contains(@class, 'fa-check')][contains(@class,
        'green')]][contains(text(),$Permission)]
      Edit button in Permissions On Team Global: >-
        //*[*[h5[contains(text(),'Permissions On Team
        Global')]]]//span[contains(text(),'Edit')]
      Permission - Send Notification: '//df-checkbox[.='' Send Notification '']'
      Permission - View Results: '//df-checkbox[.='' View Results '']'
      Permission - Cancel Notification: '//df-checkbox[.='' Cancel Notification '']'
      Permission - Manage Templates: '//df-checkbox[.='' Manage Templates '']'
      Permission - Open From Template: '//df-checkbox[.='' Open From Template '']'
      Permission - View Template: '//df-checkbox[.='' View Template '']'
      Permission - Manage Sub-teams: '//df-checkbox[.='' Manage Sub-teams '']'
      Permission - Manage Groups: '//df-checkbox[.='' Manage Groups '']'
      Permission - Manage Public User Data: '//df-checkbox[.='' Manage Public User Data '']'
      Permission - View Private User Data: '//df-checkbox[.='' View Private User Data '']'
      Permission - Manage Private User Data: '//df-checkbox[.='' Manage Private User Data '']'
      Permission - Manage Access: '//df-checkbox[.='' Manage Access '']'
      Permission - Manage Permissions: '//df-checkbox[.='' Manage Permissions '']'
      Permission - Manage Hotlines: '//df-checkbox[.='' Manage Hotlines '']'
      Permission - View Web Reports: '//df-checkbox[.='' View Web Reports '']'
      subteam1-team1 (current team context) in Team Name section: >-
        //td[contains(@aria-label,'Team Name') and
        contains(text(),'subteam1-team1')]
      Global (current team context) in Team Name section: '//td[contains(@aria-label,''Team Name'') and contains(text(),''Global'')]'
      team1 in Team Name section: '//td[contains(@aria-label,''Team Name'') and contains(text(),'' team1 '')]'
      Full Name (in Viewing User dialog): >-
        //label[contains(@class,'label')][.='Full
        Name']//following-sibling::div[contains(@class,'col')]
      Usernames (in Viewing User dialog): >-
        //label[contains(@class,'label')][.='Usernames']//following-sibling::div[contains(@class,'col')]
      Newly created user record: '//td[@data-header=''Name''][text()=$Fullname]'
      Customer Name (in Customer list): '(//td[@data-header=''Name''][contains(text(),$CustomerName)])[1]'
      No Device Admin User created: >-
        //h5[@class='modal-title'][contains(text(),' Viewing User: No Device
        Admin User')]
      Viewing User <Fullname> header: >-
        //h5[@class='modal-title'][contains(normalize-space(.),'Viewing
        User')][contains(normalize-space(.),$Fullname)]
      Devices tab: '//a[@id=''devices'']'
      Time/Date tab: '//a[contains(text(),''Time/Date'')]'
      Cell Phone Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][1]/td[contains(text(),' Not
        Configured ')]
      Fax Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][2]/td[contains(text(),' Not
        Configured ')]
      Home Phone Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][3]/td[contains(text(),' Not
        Configured ')]
      Personal Email Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][4]/td[contains(text(),' Not
        Configured ')]
      Personal Email Not Configured (in Viewing User dialog): >-
        //tr[td[contains(text(),'Personal Email')]]/td[contains(text(),'Not
        Configured')]
      Personal Smart Phone Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][5]/td[contains(text(),' Not
        Configured ')]
      Personal Tablet Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][6]/td[contains(text(),' Not
        Configured ')]
      SMS Phone Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][7]/td[contains(text(),' Not
        Configured ')]
      SMS Phone Not Configured (in Viewing User dialog): >-
        //tr[td[contains(text(),'SMS Phone')]]/td[contains(text(),'Not
        Configured')]
      Work Email Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][8]/td[contains(text(),' Not
        Configured ')]
      Work Email Configured value: >-
        //td[@data-header="Current
        Value"][contains(normalize-space(.),$UserEmail)]
      Work Email Current Value (in User View popup): '//td[@data-header="Current Value" and contains(text(),$UserEmail)]'
      Phone Number Current Value (in User View popup): '//td[@data-header="Current Value" and contains(text(),$UserPhoneNumber)]'
      SMS Phone Current Value (in User View popup): '//td[@data-header="Current Value" and contains(text(),$UserSMSNumber)]'
      Work Phone Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][9]/td[contains(text(),' Not
        Configured ')]
      Work Phone Not Configured (in User View popup): >-
        //tr[td[contains(text(),'Work Phone')]]/td[contains(text(),'Not
        Configured')]
      Work Smart Phone Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][10]/td[contains(text(),' Not
        Configured ')]
      Work Tablet Not Configured: >-
        //tr[contains(@class,'ng-star-inserted')][11]/td[contains(text(),' Not
        Configured ')]
      Disable button: '//span[text()='' Disable '']'
      Work Email (disabled): '//td[text()=''Work Email (disabled)'']'
      Close button: '//span[contains(text(),''Close'')]'
      User screen: '//div[@class=''modal-content'']'
      No data found: '//td[.=''No Data found'']'
      All Customer Names: '//td[@data-header=''Name'']'
      Clone under View Notification: '//span[contains(@class,''df-button'')][contains(text(),''Clone'')]'
      Specify a custom device escalation radio button: '//div[contains(text(),''Specify a custom device escalation'')]'
      Team column in User List screen: '//table[contains(@class,''df-table'')]//th[contains(text(),''Team'')]'
      Up or Down Icon fot Team Column: '//table[contains(@class,''df-table'')]//th[contains(text(),''Team'')]//div'
      Team column for 'adminuser1-subteam1-team1': >-
        //td[text()='adminuser1-subteam1-team1']/parent::tr[contains(@class,'ng-star-inserted')]/td[4]
      Row with adminuser1-subteam1-team1: '//td[text()=''adminuser1-subteam1-team1'']/parent::tr'
      Row with adminuser1-subteam1-team2: '//td[text()=''adminuser1-subteam1-team2'']/parent::tr'
      Row with leader-team1-subteam1: '//td[text()=''leader-team1-subteam1'']/parent::tr'
      Row with regularuser1-subteam1-team1: '//td[text()=''regularuser1-subteam1-team1'']/parent::tr'
      Row with regularuser2: '//td[text()=''regularuser2'']/parent::tr'
      Row with adminuser1-team1: '//td[text()=''adminuser1-team1'']/parent::tr'
      Team column for 'adminuser1': >-
        //td[text()='adminuser1']/parent::tr[contains(@class,'ng-star-inserted')]/td[4]
      Team column for 'adminuser1-team1': >-
        //td[text()='adminuser1-team1']/parent::tr[contains(@class,'ng-star-inserted')]/td[4]
      Team column for 'leader-team1-subteam1': >-
        //td[text()='leader-team1-subteam1']/parent::tr[contains(@class,'ng-star-inserted')]/td[4]
      Team column for 'regularuser1-subteam1-team1': >-
        //td[text()='regularuser1-subteam1-team1']/parent::tr[contains(@class,'ng-star-inserted')]/td[4]
      Multiple Teams link for 'adminuser1-subteam1-team1': >-
        //td[text()='adminuser1-subteam1-team1']/parent::tr[contains(@class,'ng-star-inserted')]//a[contains(text(),'Multiple
        Teams')]
      Viewing User screen: >-
        //section[contains(@class,'modal-header')]/h5[contains(@class,'modal-title')
        and contains(text(),'Viewing User')]
      Teams tab is selected in Viewing User screen: '//ul[@role=''tablist'']//a[contains(@class,''active'') and @id=''teams'']'
      team1 member of adminuser1-subteam1-team1 team: >-
        //table[contains(@class,'df-table')]//td[@data-header='Team Name' and
        normalize-space(text())='team1']
      subteam1-team1 member of adminuser1-subteam1-team1 team: >-
        //table[contains(@class,'df-table')]//td[@data-header='Team Name' and
        normalize-space(text())='subteam1-team1']
      Global (current team context) member of adminuser1-subteam1-team1 team: >-
        //table[contains(@class,'df-table')]//td[@data-header='Team Name' and
        normalize-space(.)='Global (current team context)']
      Users link in Sidebar: '//df-sidebar-item//df-sidebar-item//a[normalize-space(text())=''Users'']'
      Users List Page: >-
        //df-breadcrumbs[@class='breadcrumbs']//a[contains(@class,'df-breadcrumbs__link--active')
        and contains(text(),'User List')]
      Alphabet quick filter: '//div[@class=''alphabet-quick-filter'']'
      L letter in Alphabet: '//span[contains(text(),''L'')]'
      R letter in Alphabet: '//span[contains(text(),''R'')]'
      letter in Alphabet: >-
        //button[contains(@class,'alphabet-quick-filter__item')]/span[contains(text(),$letter)]
      All in Alphabet: '//span[contains(text(),''All'')]'
      Users column: '//td[1]'
      Users column in Criteria Editor: '(//td[1])[position()>1]'
      Notification Detail Column: '//td[2]'
      Big minus icon: '//i[@class=''fa fa-minus red fa-lg'']'
      Users added to Group Members: '//tr[contains(@class,''table-success'')]'
      Phone Number Text Field: '//input[contains(@autocomplete,''phoneNumber'')]'
      Use Default Pin Checkbox: '//input[@name=''useDefaultPin'']'
      New PIN: '//input[@name=''pin'']'
      Confirm PIN: '//input[@name=''confirmPin'']'
      Edit/Configure Button: '//span[contains(text(),''Edit/Configure'')]'
      Edit/Configure Disabled Button: '//span[contains(text(),''Edit/Configure'')]/parent::button[@disabled]'
      Created user With team1: '//tr[td[text()=$Fullname]]//td/a[text()=''team1 '']'
      team1 Option: '//df-option//div[text()=''team1'']'
      Global Option: '//df-option//div[text()=''Global'']'
      Custom Fields tab: '//a[text()='' Custom Fields'']'
      Custom field AGE value: '//*[label[text()=''AGE'']]/div'
      Custom field CITY value: '//*[label[text()=''CITY'']]/div'
      Custom field COUNTRY value: '//*[label[text()=''COUNTRY'']]/div'
      Custom field DOJ value: '//*[label[text()=''DOJ'']]/div'
      Save successful Message: '//p[contains(text(),''Save successful'')]'
      Details of User in Modal Window: '//h5[contains(text(),$Fullname)]'
      User Device Listed: '//div[contains(text(),''Device Name'')]'
      New Dropdown: '//button[text()='' New '']'
      New Email Button: '//button[contains(text(),"New Email")]'
      Create Custom Email Device Screen: '//h5[contains(text(),''Create Custom  Email Device'')]'
      Name Text Field: '//input[@name=''name'']'
      Email Address Text Field: '//input[@name=''emailAddress'']'
      Value in type Custom Email: '//tr[@class=''ng-star-inserted''][1]/td[@data-header=''Device Name'']'
      Profiles Tab: '//a[contains(text(),''Profiles'')]'
      User Profiles Listed: '//th[contains(text(),''Profile'')]'
      A User Profile in List: >-
        //a[contains(text(),'Profiles')]/following::td[@data-header='Profile'][1]
      Configure Button: '//span[contains(text(),''Configure'')]'
      Edit Notification Profile Screen: '//h5[contains(text(),''Edit Notification Profile'')]'
      Custom Email in Device List: '(//div[contains(text(),$CustomEmail)])[1]'
      Custom Email added to the right panel: '(//div[contains(text(),$CustomEmail)])[2]'
      User Saved (Configured): '//span[contains(text(),''(User Configured)'')]'
      Pager: '//td[normalize-space(text())=''Pager'']'
      US Canada Radio Button: >-
        //div[normalize-space(text())='U.S/Canada']//parent::label//div[@class='df-radio-input__container']
      Carrier Drop down: '//df-select[@id=''carrier'']'
      Edit Standard Pager Device header: '//h5[contains(text(),''Edit Standard Pager Device'')]'
      Metrocall: '//df-option//div[text()=''Metrocall'']'
      Phone Number Text Field in Edit Standard Pager Device popup: '//input[@autocomplete=''phoneNumber'']'
      Save Button In Model: '//span[contains(text(),''Save'')]'
      Upload Audio Button: '//span[normalize-space(text())=''Upload Audio'']'
      File Upload Editor Pop Up: '//h5[text()=''File Upload Editor'']'
      Add Icon to Upload File: '//input[@id=''file'']'
      message wav file uploaded: '//span[normalize-space(text())=''message.wav'']'
      Edit Standard Phone Device Popup: '//h5[contains(text(),''Edit Standard Phone Device'')]'
      Edit Standard SMS Device Popup: '//h5[contains(text(),''Edit Standard SMS Device'')]'
      Activated Step 1 Tab: '//li[contains(@class,''nav-item active enabled'')]/a[text()=''Step 1'']'
      Activated Step 2 Tab: '//li[contains(@class,''active enabled'')]/a[text()=''Step 2'']'
      Activated Step 3 Tab: '//li[contains(@class,''active enabled'')]/a[text()=''Step 3'']'
      Description Input field- in Team Definition(Step 1 of 3): '//input[@name="description"]'
      Updated Team Description: '//div[contains(text(),$NewDesc)]'
      plus Icon for any team(eg- team1): '//a[@class="black" and text()=''team1'']/ancestor::tr/td[1]/i[1]'
      Filtered Group Column: >-
        //df-card-header[df-card-title[text()='Smart Groups (Filtered by
        Criteria)']]//following::df-card-content//td[1]
      User List grid: >-
        //df-card[contains(@class,'list-container')]//div[contains(@class,'flex-column')]
      Outside Add new user screen: //ngb-modal-backdrop
      Pagination Bar inside Members Section: >-
        //h5[contains(text(),'Members')]//following-sibling::section[1]//df-table-paginator
      Members List inside Members Section: >-
        //h5[contains(text(),'Members')]//following-sibling::section[1]//df-card/ngb-accordion
      Next Button inside Members Section: >-
        (//h5[contains(text(),'Members')]//following-sibling::section[1]//df-table-paginator//button[@class="df-table-paginator__options__btn"])[3]
      Total number of pages inside Members Section: >-
        //h5[contains(text(),'Members')]//following-sibling::section[1]//span[contains(@class,'text-nowrap')][2]
      Items per page dropdown inside Members Section:
        type: dropdown
        open: >-
          //h5[contains(text(),'Members')]//following-sibling::section[1]//df-select
        value: '//df-option/div[.=''{value}'']'
      Page number in pagination bar inside Members Section: >-
        //h5[contains(text(),'Members')]//following-sibling::section[1]//df-table-paginator//input
      <UserName> under the Name column in the Users list: '//tr/td[@data-header=''Name''][normalize-space(.)=$UserName]'
      <TeamLeaderName> under the Name column in the Users list: '//tr/td[@data-header=''Name''][normalize-space(.)=$TeamLeaderName]'
      <MemberName> under the Name column in the Users list: '//tr/td[@data-header=''Name''][normalize-space(.)=$MemberName]'
      View Details button in the Users list: '//button[normalize-space(.)=''View Details'']'
      List of Permission that are checked in the View Permission on Team dialog: >-
        //div[@class='modal-content'][contains(normalize-space(.),'Permissions
        On
        Team')]//section[@class='modal-body']/ul/li/i[contains(@class,'green')]
      Edit button in the View Permission on Team dialog: >-
        //div[@class='modal-content'][contains(normalize-space(.),'Permissions
        On Team')]//button[normalize-space(.)='Edit']
      Selected checkbox in the View Permission on Team dialog: '(//df-checkbox[contains(@class,''checked'')]/button)[1]'
      Non selected checkbox in the View Permission on Team dialog: '(//df-checkbox[not(contains(@class,''checked''))]/button)[1]'
      Send Notification checkbox in the Edit Permission on Team dialog: '//button[normalize-space(.)=''Send Notification'']'
      View Results checkbox in the Edit Permission on Team dialog: '//button[normalize-space(.)=''View Results'']'
      View Web Reports checkbox in the Edit Permission on Team dialog: '//button[normalize-space(.)=''View Web Reports'']'
      Manage Hotlines checkbox in the Edit Permission on Team dialog: '//button[normalize-space(.)=''Manage Hotlines'']'
      Send Notification checkbox in the View Permission on Team dialog is CHECKED: >-
        //li[./i[contains(@class,'green')]][contains(normalize-space(.),'Send
        Notification')]
      View Results checkbox in the View Permission on Team dialog is CHECKED: >-
        //li[./i[contains(@class,'green')]][contains(normalize-space(.),'View
        Results')]
      View Web Reports checkbox in the View Permission on Team dialog is CHECKED: >-
        //li[./i[contains(@class,'green')]][contains(normalize-space(.),'View
        Web Reports')]
      Manage Hotlines checkbox in the View Permission on Team dialog is CHECKED: >-
        //li[./i[contains(@class,'green')]][contains(normalize-space(.),'Manage
        Hotlines')]
      Error Primary Email Address Invalid: >-
        //p[contains(text(), 'Primary Email Address should match one of the
        domain name(s)')]
      Edit Standard Mobile Email Device Popup: '//h5[contains(text(), ''Edit Standard Mobile Email Device'')]'
      Cell Standard Voice Phone: '//td[contains(text(), ''Standard Voice Phone'')]'
    name: Users page
  - selectors:
      Hotlines: '//a[text()='' Hotlines ''][contains(@class,''h5'')]'
      Hotlines page Title: '//*[contains(@class, ''section__header'')][contains(., ''Hotlines'')]'
      Hotline list page: '//a[contains(text(), ''Hotline List'')]'
      Hotline Number: '//*[@aria-label=''Phone Number'']'
      Hotline Phone Numbers: '//a[contains(text(),"Hotline Phone Numbers")]'
      Add (in Hotline Phone Numbers): '//button[span[contains(text(),''Add'')]]'
      Hotline Phone Numbers Dialog: //af-customer-hotline-phone-numbers-new
      Hotline Phone Numbers Textarea: '//*[@id=''hotlines'']'
      Save (in Hotline Phone Numbers): >-
        //div[contains(@class,'modal-content')]//button[span[contains(text(),'Save')]]
      1 (713) 568-5991 Hotline number: '//td[contains(text(),''1 (713) 568-5991'')]'
      1 (713) 568-5992 Hotline number: '//td[contains(text(),''1 (713) 568-5992'')]'
      1 (713) 568-5993 Hotline number: '//td[contains(text(),''1 (713) 568-5993'')]'
      1 (713) 568-5994 Hotline number: '//td[contains(text(),''1 (713) 568-5994'')]'
      Available hotline numbers list: '//td[@class=''break-long-words'']'
      Available hotline numbers table: '//section[.//*[.=''Available Hotline Number'']]//table'
      first Available Hotline Number: '(//section[.//*[.=''Available Hotline Number'']]//table//td)[1]'
      second Available Hotline Number: '(//section[.//*[.=''Available Hotline Number'']]//table//td)[2]'
      Available Hotline Number header: '//th[contains(text(),''Available Hotline Number'')]'
      Available hotline numbers in Edit page: '//select[@name=''hotlineNumber'']'
      Remove button: '//span[contains(text(),''Remove'')]'
      Create New Hotline: '//h5[text()=''Create New Hotline'']'
      New Hotline name input: '//*[*[h5[text()=''Create New Hotline'']]]//input'
      Drag to Add Options title: '//h5[text()="Drag to Add Options"]'
      New Message card: '//df-card/df-card-content/div[contains(text(),''New Message'')]'
      Working Hotline container: >-
        //df-card/df-card-content/div[contains(@class,'hotline-tree__container')]
      Message Name: '//input[@id=''name'']'
      Press 1 for Message Name: '//div[contains(text(),'' Press 1 '')][contains(text(),$MessageName)]'
      Created Hotline row: '//strong[text()=$HotlineName]'
      Created Hotline status: '//*[*[strong[text()=$HotlineName]]]//td[text()=$Status]'
      Edit dropdown: '//button[text()='' Edit'']'
      Edit Hotline Detail: '//button[text()='' Edit Hotline Detail'']'
      Activate Hotline: '//span[text()='' Activate Hotline '']'
      Phone Number row: '//td[@data-header="Phone Number"]'
      Phone Number checkbox: '//*[td[@data-header="Phone Number"]]//df-checkbox'
      Hotline with number <HotlinePhoneNumber>: >-
        //td[@aria-label='Phone
        Number']/p[contains(normalize-space(.),$HotlinePhoneNumber)]
      Hotline tree node: >-
        //div[contains(@class,'hotline-tree-view__item')][contains(normalize-space(.),$HotlineName)]
      New Message in the Drag to Add Options: >-
        //div[contains(@class,'is-new-option')][normalize-space(.)='New
        Message']
      Hotlines Editor breadcrumb: '//a[contains(@class,''active'')][normalize-space(.)=''Editor'']'
      Message section in the Hotline Option Editor: '//df-card-title/span[normalize-space(.)=''Message'']'
      OK button in the Hotline Security dialog: >-
        //div[contains(@class,'df-modal__content')]//button[contains(normalize-space(.),'OK')]
      Message text area in the Hotline Option Editor: '//div[contains(@class,''fr-element'')][@contenteditable=''true'']'
      Security button in the Hotline Option Editor: '//button[normalize-space(.)=''Security...'']'
      User Identification and PIN Authentication Required radio button: >-
        //div[contains(@class,'df-radio-input__text')][normalize-space(.)='User
        Identification and PIN Authentication Required']
      Save button in the Hotline Editor: '//button[normalize-space(.)=''Save'']'
      Activate Hotline button in the Hotline Editor: '//button[normalize-space(.)=''Activate Hotline'']'
      Save button in the Hotline Option Editor: '//button[normalize-space(.)=''Save'']'
      Press 1 <MessageName> node below in the Hotline tree: >-
        //div[contains(@class,'hotline-tree-view__item')][contains(normalize-space(.),'Press
        1')][contains(normalize-space(.),$MessageName)]
      Phone Number <HotlinePhoneNumber> in the Hotline Activation Editor dialog: >-
        //div[contains(@class,'df-modal__content')]//td[@aria-label='Phone
        Number'][normalize-space(.)=$HotlinePhoneNumber]
      Select checkbox for the Phone Number <HotlinePhoneNumber> in the Hotline Activation Editor dialog: >-
        //div[contains(@class,'df-modal__content')]//tr[.//td[@aria-label='Phone
        Number'][normalize-space(.)=$HotlinePhoneNumber]]//df-checkbox/button
      Save button in the Hotline Activation Editor dialog: >-
        //div[contains(@class,'df-modal__content')]//button[normalize-space(.)='Save']
      Green Success message: '//df-toast//h1[normalize-space(.)=''Success!'']'
      Active under the Status column: '//td[@data-header=''Status''][normalize-space(.)=''Active'']'
    name: Hotlines
  - selectors:
      Inbox: null
      Email with title Your temporary AlertFind password: null
      Email Body: null
      Email with title like AF Import for unknown customer *** FAILED ***: null
    name: External Mailbox
  - selectors:
      User Profile: >-
        //div[contains(@class,'df-user-profile') and
        .//div[contains(@class,'df-user-profile')]]
      AlertFind Logo: '//p[@class=''df-topbar-logo__name''][contains(text(),''AlertFind'')]'
    name: Dashboard
  - selectors:
      Teams page title: '//*[contains(@class, ''section__header'')][contains(., ''Team'')]'
      Add selected: '//span[contains(text(),''Add Selected'')]'
      recipient appears in the recipient list: '//td[contains(text(),''adminuser1'')]'
      email admin in the recipient list: '//td[contains(text(),''emailadmin'')]'
      View Notification: '//a[contains(text(),''View Notification'')]'
      Team expand icon in Team page: >-
        //tr[contains(@class,'df-expandable-row') and
        td[a[text()=$TeamName]]]//i[@class='fa expandable-icon']
      Team name in Team page: >-
        //tr[contains(@class,'df-expandable-row') and
        td[a[text()=$TeamName]]]//a
      <MainTeamName> expand icon in Team page: >-
        //tr[contains(@class,'df-expandable-row') and
        td[a[text()=$MainTeamName]]]//i[@class='fa expandable-icon']
      <MainTeamName> in Team page: >-
        //tr[contains(@class,'df-expandable-row') and
        td[a[text()=$MainTeamName]]]//a
      <SubTeamName> expand icon in Team page: >-
        //tr[contains(@class,'df-expandable-row') and
        td[a[text()=$SubTeamName]]]//i[@class='fa expandable-icon']
      <SubTeamName> in Team page: >-
        //tr[contains(@class,'df-expandable-row') and
        td[a[text()=$SubTeamName]]]//a
      Details button in Team page: '//button/span[contains(text(),''Details'')]'
      Delete button in Team page: '//button/span[contains(text(),''Delete'')]'
      Leaders pagination in View Details page: >-
        //table[contains(@class,'df-table')]//df-table-paginator[contains(@class,'df-table-paginator')]
      Members pagination in View Details page: >-
        //af-team-members[@class='ng-star-inserted']//df-table-paginator[contains(@class,'df-table-paginator')]
      Team Information page: '//h5[contains(text(),''Team Information'')]'
      Edit button in Team Information section: >-
        //h5[contains(text(),'Team
        Information')]/following-sibling::section[1]//span[@class='df-button__content'][contains(text(),'Edit')]
      Edit Team header: '//div[not(@hidden)]/h5[@class=''section__body-header'']'
      Team Name textbox in Edit Team page: '//input[@name=''teamName'']'
      Selected tab in Edit Team page: >-
        //div[@_ngcontent-c36 and
        not(@hidden)]//li[contains(@class,'nav-item')]/a[@class='nav-link
        active']
      Users rows with Team Name in Edit Team page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//tr[contains(@class, 'picked
        gray')]/td[@data-header='Team' and a[contains(text(),$TeamName)]]
      Users rows with green background in Edit Team page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//tr[contains(@class, 'picked gray')]
      Users rows in Edit Team page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//table[contains(@class,'df-table--responsive')]/tbody/tr
      Members rows in Edit Team page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//div[label[contains(text(),'Members')]]//tbody/tr
      Items per page dropdown in Edit Teams page:
        type: dropdown
        open: >-
          //div[not(@hidden) and
          h5[@class='section__body-header']]//div[@class='df-table-paginator__options__select'
          and span[contains(text(),'Items per page')]]/df-select
        value: '//df-option/div[.=''{value}'']'
      Items per page dropdown (Edit Teams > Leaders):
        type: dropdown
        open: >-
          //h5[normalize-space(text())='Leaders']/following-sibling::section[1]//div[@class='df-table-paginator__options__select'
          and span[contains(text(),'Items per page')]]/df-select
        value: '//df-option/div[.=''{value}'']'
      Next page button in Edit Teams page: >-
        //div[not(@hidden) and h5[@class='section__body-header']]//i[@class='fa
        fa-caret-right']
      Page textbox in Edit Teams page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//input[contains(@class,'df-table-paginator__options__pages__input')]
      Green plus icon for user in Edit Teams page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//tr[td[@data-header='Name'][text()=$UserName]]//button[contains(@class,'pick-button')]
      Red minus icon for user in Edit Teams page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//tr[td[normalize-space(text())=$UserName]]//button[contains(@class,'clear')][.//i[contains(@class,'minus')]]
      User team cell in Edit Teams page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//tr[td[@data-header='Name'][text()=$UserName]]/td[@data-header='Team']
      Team green cells in Edit Teams page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//tr[td[@data-header='Name'] and
        contains(@class,'table-success picked gray')]/td[@data-header='Team']
      Name cell in Members list: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//div[label[contains(text(),'Members')]]//tbody/tr/td[text()=$UserName]
      Next button in Edit Teams page: '//button[contains(text(),''Next'')]'
      Leaders rows in Edit Team page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//div[contains(@class,'leaders__container')]/ngb-accordion/div[contains(@class,'card')]
      Leader Member minus icon in Edit Team page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//div[contains(@class,'leaders__container')]/ngb-accordion/div[contains(@class,'card')]//div[div[contains(text(),$LeaderName)]]//i[@class="fa
        fa-minus red"]
      Name cell in Leaders list: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//div[contains(@class,'leaders__container')]/ngb-accordion/div[contains(@class,'card')]//div[contains(text(),$UserName)]
      Team List of Members in Step 3: '//af-team-members/df-card/ngb-accordion/div[contains(@class,''card'')]'
      the 'Header Plus' icon in 'Add Team' page section 2: >-
        //div[contains(h5, '(Step 2 of
        3)')]//th/button[.//i[contains(@class,'fa-plus')]]
      Team Member cell: >-
        //af-team-members/df-card/ngb-accordion/div[contains(@class,'card')]//a[text()=$MemberName]
      Team Members pagination section in Step 3: //af-team-members/df-card/df-table-paginator
      Team Members Last Page button in Step 3: >-
        //af-team-members/df-card/df-table-paginator//i[@class="fa
        fa-step-forward"]
      Team List of Leaders in Step 3: //af-team-leaders/table/tbody/tr
      Team Leader cell: '//af-team-leaders/table/tbody/tr//*[contains(text(),$LeaderName)]'
      Team Leader cell - SN access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="SN"]/i
      Team Leader cell - VR access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="VR"]/i
      Team Leader cell - CN access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="CN"]/i
      Team Leader cell - MI access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="MI"]/i
      Team Leader cell - OI access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="OI"]/i
      Team Leader cell - VI access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="VI"]/i
      Team Leader cell - MT access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="MT"]/i
      Team Leader cell - MG access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="MG"]/i
      Team Leader cell - MU access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="MU"]/i
      Team Leader cell - VP access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="VP"]/i
      Team Leader cell - MP access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="MP"]/i
      Team Leader cell - MA access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="MA"]/i
      Team Leader cell - SP access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="SP"]/i
      Team Leader cell - MH access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="MH"]/i
      Team Leader cell - VW access: >-
        //af-team-leaders/table/tbody/tr[.//*[contains(text(),$LeaderName)]]//td[@data-header="VW"]/i
      Team Leaders pagination section in Step 3: //af-team-leaders/table/tbody/df-table-paginator
      Team Leaders Last Page button in Step 3: >-
        //af-team-leaders/table/tbody/df-table-paginator//i[@class="fa
        fa-step-forward"]
      Team Leaders Next Page button in Step 3: '//af-team-leaders/table/tbody/df-table-paginator//i[contains(@class,"fa-caret-right")]'
      Team Members Next Page button in Step 3: '//af-team-members/df-card/df-table-paginator//i[contains(@class,"fa-caret-right")]'
      Team Leaders Items per page: >-
        (//div[@class='df-table-paginator__options__select' and
        span[contains(text(),'Items per page')]]/df-select)[2]
      Done button in Edit Team page: '//button[contains(text(),''Done'')]'
      Team Member minus icon in Edit Team page: >-
        //div[not(@hidden) and
        h5[@class='section__body-header']]//div[label[contains(text(),'Members')]]//tbody/tr[td[contains(text(),$MemberName)]]//i[@class="fa
        fa-minus red"]
      Teams link in Sidebar: >-
        //a[normalize-space(text())='Administration']/ancestor::df-sidebar-item//a[normalize-space(text())='Teams']
      Compose (Advanced) link in Sidebar: >-
        //div[contains(@class,'sidebar')]//a[contains(text(),'Compose
        (Advanced)')]
      Teams listed in table: >-
        //h1[contains(@class,'section__header') and
        normalize-space(text())='Team']/parent::div//table
      Add Team to Global Button: '//span[contains(text(),''Add Team to Global'')]'
      Step 1 Tab is Activated: '//li[contains(@class,''active'')]/a[text()=''Step 1'']'
      Step 2 Tab is Activated: '//li[contains(@class,''active'')]/a[text()=''Step 2'']'
      Step 3 Tab is Activated: '//li[contains(@class,''active'')]/a[text()=''Step 3'']'
      User Tab is Activated: '//li[contains(@class,''active'')]/a[text()=''User'']'
      Users Tab is Activated: >-
        //af-wizard-step/div[not(@hidden)]//a[contains(@class,'active')][normalize-space(.)='Users']
      Team Name Text Field: '//input[@name=''teamName'']'
      User Search Text Field in Teams Page: '(//input[@id=''search''])[1]'
      User Search TIcon in Teams Page: '(//i[@class=''fa fa-search''])[1]'
      regularuser2 in Search result: '(//td[text()=''regularuser2''])[1]'
      Plus Green icon of regularuser2: >-
        (//td[text()='regularuser2'])[1]//following-sibling::td//i[@class='fa
        fa-plus']
      regularuser2 added to right side panel: >-
        //label[text()='Members']//following-sibling::div//td[text()='regularuser2']
      regularuser2 added to Recipients panel: >-
        //div[ngb-tabset//a[contains(text(),'Recipients')]]//td/span[contains(text(),'regularuser2')]
      User added to Recipients panel: >-
        //div[ngb-tabset//a[contains(text(),'Recipients')]]//td/span[contains(text(),$Fullname)]
      Next button in Teams page: '//button[contains(text(),''Next'')]'
      '''team1'' in the Team list': '//td[@data-header=''Name'']/a[.=''team1'']'
      the 'Plus' icon for TeamName in 'Teams' page: >-
        //tr[td[@data-header='Name']/a[.=$TeamName]]//i[contains(@class,'expandable-icon')]
      + icon for team1: '//tr[.//a[.=''team1'']]/td/i[contains(@class,''expandable-icon'')]'
      Details button of the expanded Team: >-
        //tr[.//a[.='team1']]/following-sibling::div//button[normalize-space(.)='Details']
      Delete button of the expanded Team: >-
        //tr[.//a[.='team1']]/following-sibling::div//button[normalize-space(.)='Delete']
      Edit team page: >-
        //a[contains(@class,'df-breadcrumbs__link--active') and contains(.,'Edit
        team')]
      All button in the Users tab of the Edit team page: '(//button[normalize-space(.)=''All''])[1]'
      Cancel button in the Edit team page: '//button[normalize-space(.)=''Cancel'']'
      Add button corresponding to <MemberName>: >-
        //af-wizard-step/div[not(@hidden)]//tr[./td[@data-header='Name'][normalize-space(.)=$MemberName]]//button[contains(@class,'pick')]
      Add button corresponding to <TeamLeaderName>: >-
        //af-wizard-step/div[not(@hidden)]//tr[./td[@data-header='Name'][normalize-space(.)=$TeamLeaderName]]//button[contains(@class,'pick')]
      <MemberName> under the Name column in the Members grid: >-
        //div[./label[normalize-space(.)='Members']]//table//td[normalize-space(.)=$MemberName]
      <TeamLeaderName> under the Name column in the Leaders grid: >-
        //div[@role='tab']//div[@class='col'][normalize-space(.)=$TeamLeaderName]
      '''Team Definition (Step 2 of 3): Define Team Leadership'' header': >-
        //h5[normalize-space(.)='Team Definition (Step 2 of 3): Define Team
        Leadership']
      the 'Header Plus' icon in 'Add Team' page: >-
        //div[h5[text()='Team Definition (Step 1 of 3): Define Team
        Membership']]//th/button[contains(@class,'df-button--clear') and
        .//i[contains(@class,'fa-plus')]]
      the 'Next Page' button in 'Pagination' toolbar: >-
        //div[h5[text()='Team Definition (Step 1 of 3): Define Team
        Membership']]//button[i[contains(@class,'fa-caret-right')]]
      Search textbox in the Add Team page: '//af-wizard-step/div[not(@hidden)]//input[@id=''search'']'
      Search button in the Add Team page: >-
        //af-wizard-step/div[not(@hidden)]//button[contains(@class,'search-btn')]
      Next button in the Add Team page: '//button[normalize-space(.)=''Next'']'
      Previous button in the Add Team page: '//button[normalize-space(.)=''Previous'']'
      Cancel button in the Add Team page: '//button[normalize-space(.)=''Cancel'']'
      Done button in the Add Team page: '//button[normalize-space(.)=''Done'']'
      <MemberName> in the Team Definition Step 3's Members grid: >-
        //div[@class='form-group
        row'][.//b[normalize-space(.)='Members:']]//ngb-accordion[normalize-space(.)=$MemberName]
      <TeamLeaderName> in the Team Definition Step 3's Leaders grid: >-
        //div[@class='form-group
        row'][.//b[normalize-space(.)='Leaders:']]//td[@data-header='Name'][normalize-space(.)=$TeamLeaderName]
      <MainTeamName> header in the View Team page: '//h5/span[normalize-space(.)=$MainTeamName]'
      <SubTeamName> header in the View Team page: '//h5/span[normalize-space(.)=$SubTeamName]'
      No sub-teams: '//df-card[normalize-space(.)=''No sub-teams'']'
      Add Team button in the Sub Team section: '//button[normalize-space(.)=''Add Team'']'
      <SubTeamName> in the Sub-teams section: >-
        //h5[normalize-space(.)='Sub-teams']/following-sibling::section//td[@data-header='Name'][normalize-space(.)=$SubTeamName]
      Expand button corresponding to <SubTeamName> in the Sub-teams section: >-
        //h5[normalize-space(.)='Sub-teams']/following-sibling::section//tr[./td[@data-header='Name'][normalize-space(.)=$SubTeamName]]//i[contains(@class,'expandable-ico')]
      View Details button in the Sub-teams section: >-
        //h5[normalize-space(.)='Sub-teams']/following-sibling::section//button[normalize-space(.)='View
        Details']
      Type to search (Team > Team Definition > Define Team Membership): '//af-wizard-step[contains(.,''Define Team Membership'')]//*[@id="search"]'
      Name Search textbox in Teams Page: //input[contains(@id,"name-search")]
    name: Teams Page
  - selectors:
      Incidents link in Sidebar: >-
        //df-sidebar-item//df-sidebar-item//a[normalize-space(text())='Incidents']
      Incidents List Section: >-
        //df-breadcrumbs[@class='breadcrumbs']//a[contains(@class,'df-breadcrumbs__link--active')
        and contains(text(),'Incident List')]
      Incident of First Row: '(//df-card[contains(@class,''list-container'')]//following::td)[1]'
      Un-Archived Selected Incident Details: '//div[contains(@class,''d-flex flex-column h'')]'
      Archived Selected Incident Details: '//div[contains(@class,''d-flex flex-column h'')]'
      Archive Button: '//span[contains(text(),''Archive'')]'
      Are you sure you want to archive this incident Confirmation Popup: '//p[contains(text(),''Are you sure you want to Archive this incident?'')]'
      Archived Incident: '//af-incidents[@class=''ng-star-inserted'']'
      Un-archive Button: '//span[contains(text(),''Un-archive'')]'
      Are you sure you want to Un-archive this incident Confirmation Popup: >-
        //p[contains(text(),'Are you sure you want to Un-archive this
        incident?')]
      Title value of First Row in Incident List (With Latest Date in Opened Column): '(//df-card[contains(@class,''list-container'')]//following::td/p)[1]'
      Top 'SOAP API' from list: '(//df-card[contains(@class,''list-container'')]//following::td/p)[1]'
      Incident Detail Screen: '//a[contains(text(),''Detail'')]'
      SOAP API - Scenario notification: '//b[contains(text(),''SOAP API - Scenario'')]'
      SOAP API Incident Test - Override notification: '//b[contains(text(),''SOAP API Incident Test - Override'')]'
      Top 'SOAP API - Scenario': '(//b[contains(text(),''SOAP API - Scenario'')])[1]'
      Top 'SOAP API Incident Test - Override': '(//b[contains(text(),''SOAP API Incident Test - Override'')])[1]'
      View Notification Screen (with notification details): '//a[contains(text(),''View Notification'')]'
      First incident in Incident List: '(//tr[td[@aria-label=''Status'']])[1]'
      Opened column of first Incident in Incidents List: '(//td[contains(text(),''by SOAP API Admin'')])[1]'
      Today's date on opened column of first Incident in Incidents List: '(//td[contains(text(),$today)])[1]'
      Title (in Add Incident): '//input[@name=''title'']'
      Description (in Add Incident): '//input[@name=''description'']'
      Incident name Title cell (in Incidents List): '//tr//td[@data-header=''Title''][contains(.,$IncidentTitle)]'
      Yes button (in Incidents modal dialog): >-
        (//section[contains(@class,'modal')]//button//span[contains(text(),'Yes')])[1]
    name: Incidents Page
  - selectors:
      Broadcast Groups link in Sidebar: >-
        //df-sidebar-item//df-sidebar-item//a[normalize-space(text())='Broadcast
        Groups']
      Broadcast Groups List: >-
        //h1[contains(@class,'section__header') and
        normalize-space(text())='Broadcast Groups']
      Broadcast Groups List (in Broadcast Groups): '//div[.//h1[normalize-space(text())=''Broadcast Groups'']]//table'
      Users tab: '//a[text()='' Users'']'
      Group Members tab: '//a[text()='' Group Members'']'
      Group name in list: '//td[@data-header="Name"][normalize-space(text())=$GroupName]'
      created Group Description: >-
        //td[contains(text(),$GroupName)][@aria-label='Name']/following-sibling::td[@aria-label='Description']
      created Group Team: >-
        //td[contains(text(),$GroupName)][@aria-label='Name']/following-sibling::td[@aria-label='Team']
      created Group Quick Launch ID: >-
        //td[contains(text(),$GroupName)][@aria-label='Name']/following-sibling::td[@aria-label='Quick
        Launch ID']
      New Button on Broadcast Groups Page: '//span[contains(text(),''New'')]'
      Create Group Details Popup: '//h5[contains(text(),''Create Group Details'')]'
      Group Name field on Create Group Details Popup: '//input[@name=''groupName'']'
      Save Button on Create Group Details Popup: '//span[contains(text(),''Save'')]'
      Created Group Name: '//div[contains(text(),$groupName) or contains(text(),$GroupName)]'
      User Search Text Field: '(//input[@id=''search''])[1]'
      User Search Icon: '(//i[@class=''fa fa-search''])[1]'
      User in Search result: '(//td[contains(text(),$Fullname)])[1]'
      Plus Green icon of User: >-
        (//td[contains(text(),$Fullname)])[1]//following-sibling::td//i[@class='fa
        fa-plus']
      Plus Green icon of First User: '(//tbody//tr[1]//i[@class=''fa fa-plus''])[1]'
      User added to right side panel: '//span[contains(text(),$Fullname)]'
      Save button Broadcast Groups Page: '//span[contains(text(),''Save'')]'
      Group Name Value: '//td[@data-header=''Name'']'
      Regular User1 added to right side panel: '//span[contains(text(),''Regular User1'')]'
      Regular User1 in Search result: '(//td[contains(text(),''Regular User1'')])[1]'
      Plus Green icon of Regular User1: >-
        (//td[contains(text(),'Regular
        User1')])[1]//following-sibling::td//i[@class='fa fa-plus']
      User List In Group membership: '//td[@data-header=''Name'']'
      Users (Filtered by Criteria) List: '//td[@data-header=''Name''][contains(text(),''use'')]'
      first filtered user (in Users Filtered by Criteria): >-
        (//df-card[contains(.,'Users (Filtered by
        Criteria)')]//af-user-list//table//td[@data-header='Name'])[1]
      first user (in users list In Group Membership in Broadcast Groups): '(//td[@data-header="Name"])[1]'
      user (in users list In Group Membership in Broadcast Groups): '//td[@data-header="Name"][normalize-space(text())=$Username]'
      Broadcast Group in right panel: '//td[@data-header=''Type'' and contains(text(),''Broadcast'')]'
      Search Filter Button: '//button[text()='' Search'']'
      Back to Broadcast Groups: '//span[contains(text(),''Back to Broadcast Groups'')]'
      Search bar with text '1 criteria': '//span[contains(text(),''1 criteria'')]'
      5 (in Items per Page dropdown): '//div[@class="ng-star-inserted" and text()=''5'']'
      Items per Page dropdown: >-
        //div[@class='df-table-paginator__options__select' and
        span[contains(text(),'Items per page')]]/df-select
      Broadcast groups displayed in page: '//td[@data-header="Name"]'
      Broadcast groups (in Page 2): '(//td[@data-header="Name"])[1]'
      Items per Page with value as '50': '//div[contains(text(),''50'')]'
      all rows (in Broadcast Groups > Users > Left): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr//td[contains(@data-header,'Name')]
      First non-selected group Name cell (in Broadcast Groups > Groups List): >-
        (//af-broadcast//tbody//tr[not(contains(@class,'selected'))])[1]//td[contains(@data-header,'Name')]
      Last non-selected group Name cell (in Broadcast Groups > Groups List): >-
        (//af-broadcast//tbody//tr[not(contains(@class,'selected'))])[last()]//td[contains(@data-header,'Name')]
      first red minus button (-) in right panel (to clear all existing Group Members): >-
        (//div[contains(@class,'column-container')])[2]//thead//button[contains(@class,'clear')]
      First non-picked user Name cell (in Users tab): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[not(contains(@class,'picked'))])[1]//td[contains(@data-header,'Name')]
      First non-picked and non-selected user Name cell (in Users tab): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[not(contains(@class,'picked'))][not(contains(@class,'selected'))])[1]//td[contains(@data-header,'Name')]
      second non-picked and non-selected user Name cell (in Users tab): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[not(contains(@class,'picked'))][not(contains(@class,'selected'))])[1]//td[contains(@data-header,'Name')]
      third non-picked and non-selected user Name cell (in Users tab): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[not(contains(@class,'picked'))][not(contains(@class,'selected'))])[1]//td[contains(@data-header,'Name')]
      user one row (in Users tab): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[td[contains(@data-header,'Name')][normalize-space(.)=$UserOne]]
      user two row (in Users tab): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[td[contains(@data-header,'Name')][normalize-space(.)=$UserTwo]]
      user three row (in Users tab): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[td[contains(@data-header,'Name')][normalize-space(.)=$UserThree]]
      user Name cell (in Users tab): >-
        //div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//td[contains(@data-header,'Name')][normalize-space(.)=$UserName]
      Add button corresponding to the first selected user Name cell (in Users tab): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[contains(@class,'selected')])[1]//button[contains(@class,'pick-button')]
      Group member (in Group Members - Right): >-
        //div[contains(@class,'column-container')][not(.//af-user-list)]//table//td[normalize-space(.)=$GroupMember]
      user one (in Group Members - Right): >-
        //div[contains(@class,'column-container')][not(.//af-user-list)]//table//td[normalize-space(.)=$UserOne]
      user two (in Group Members - Right): >-
        //div[contains(@class,'column-container')][not(.//af-user-list)]//table//td[normalize-space(.)=$UserTwo]
      user three (in Group Members - Right): >-
        //div[contains(@class,'column-container')][not(.//af-user-list)]//table//td[normalize-space(.)=$UserThree]
      user one Name (Broadcast Groups > Group Membership): '//tr[td[contains(@data-header,''Name'')][normalize-space(.)=$UserOne]]'
      user two Name (Broadcast Groups > Group Membership): '//tr[td[contains(@data-header,''Name'')][normalize-space(.)=$UserTwo]]'
      user three Name (Broadcast Groups > Group Membership): '//tr[td[contains(@data-header,''Name'')][normalize-space(.)=$UserThree]]'
      added user (in Sent Notification > Users - Right): >-
        //div[contains(@class,'col-12')][not(.//af-user-list)]//table//td[@data-header='Name'][normalize-space(.)=$UserName]
      first broadcast group different from ALL (Broadcast Groups > Groups List): '(//af-broadcast//table//tbody//tr[not(contains(.,''ALL''))])[1]'
      500 in the Items per Page dropdown: '//div[contains(text(),"500")]'
    name: Broadcast Groups Page
  - selectors:
      Sites link in Sidebar: '//df-sidebar-item//df-sidebar-item//a[normalize-space(text())=''Sites'']'
      Sites List Page: >-
        //df-breadcrumbs[@class='breadcrumbs']//a[contains(@class,'df-breadcrumbs__link--active')
        and contains(text(),'Site List')]
      Site name in list: '//td[@data-header="Name"][contains(.,$SiteName)]'
      Site List (in Global Sites page): '//div[.//h1[normalize-space(text())=''Global Sites'']]//table'
      Global Sites page: '//div[.//h1[normalize-space(text())=''Global Sites'']]'
    name: Sites Page
  - selectors:
      Alert Console - Recipient Editor - Plus Icon of the First User in the list: '(//button[contains(@class, ''pick-button'')])[1]'
      Alert Console - Recipient Editor - Name of the First User in the list: '(//td[@data-header=''Name''])[1]'
      Alert Console - Recipient Editor - Add Delay button: '//span[contains(text(),''Add Delay'')]'
      Alert Console - Recipient Editor - Save button (for Delay): '//b[contains(text(), ''Delay'')]//..//..//span[contains(text(),''Save'')]'
      Alert Console - Recipient Editor - Save button: '//span[contains(text(),''Save'')]'
      Alert Console - Recipient Editor - Recipient List Names: '//a[contains(text(),''Recipients'')]/../../../div//td[@data-header=''Name'']'
      Alert Console - Compose (Advanced) link in Sidebar: '//a[contains(text(),"Compose")]'
      Alert Console - Recipient Editor Map Editor tab: '//*[@id="map"]'
      Alert Console - Compose Notification Select Recipient button: '//button[text()=''Select Recipient'']'
      Alert Console - Map Selector Google Map: //agm-map
      Alert Console - Map Selector Add Polygon(s) button: '//*[contains(text(),''Add Polygon'')]'
      Alert Console - Recipients Constraints Within selected region with Type is Maps: '//*[@data-header=''Type'']//span[contains(text(),''Maps'')]'
      Responses link under Alert Console: '//a[contains(text(),''Responses'')]'
      First notification in the list: '(//td)[1]'
      Response options: '//b[contains(text(),''Responses'')]'
      response count percentage bar: '//div[@class=''progress'']'
      Launch Center - Alert Console (on Left Panel): >-
        //body/af-root[1]/af-user-dashboard[1]/div[1]/div[2]/df-sidebar[1]/nav[1]/div[1]/div[1]/div[1]/df-sidebar-item[1]/div[2]/df-sidebar-item[1]/div[1]/a[1]/i[1]
      Compose (notification template): '//div[contains(text(),''Compose'')]'
      Compose (first notification template on list): '//div[contains(text(),''Compose'')]'
      Notification templates: '//div[@class=''wrapper'']'
      First Notification Template Listed: '(//div[@class=''wrapper''])[1]'
      New Notification Screen: '//b[contains(text(),''New Notification'')]'
      Users with name that do not start with 'a' in dropdown: >-
        //button[@class="dropdown-item ng-star-inserted" and
        not(normalize-space(starts-with(text(),'a')))]
      One of the users from the list (eg adminuser1): >-
        (//ngb-typeahead-window[@class="dropdown-menu show
        ng-star-inserted"]/button[contains(@id,'typeahead')])[1]
      To field: '//input[@placeholder="To"]'
      Notification Subject Field: '//input[@placeholder="Notification Subject"]'
      Message Text Field: '//div[@class="fr-element fr-view" and @contenteditable="true"]'
      Send Notification Button: '//i[@class="fa fa-paper-plane"]'
      Bottom of Page: '//i[@class="fa fa-paper-plane"]'
      Popup with message- 'Success! Notification Submitted Successfully': >-
        //div[@class='df-toast__body']/h1[@class='ng-star-inserted' and
        contains(text(),'Success')]
      Notification template by name: '//div[@class=''wrapper''][normalize-space(text())=$NotificationTitle]'
      Notification Template Notification Subject: '//*[@role="tablist"]//span[contains(text(),$NotificationSubject)]'
      Notification Template details: '//div[@role="tabpanel"]'
    name: Alert Console
  - selectors:
      Group - Edit Group button: '//span[contains(text(),"Edit Group")]'
      Group - Edit Criteria button: '//button[contains(text(),"Edit Criteria")]'
    name: Group
  - selectors:
      Criteria - Criteria Editor modal: '//*[contains(text(),''Criteria Editor'')]'
      Search filter button: '//button[contains(text(),''Search'')]'
      Criteria Search: '//button[contains(text(),''Criteria Search'')]'
      Clear Search: '//button[contains(text(),''Clear Search'')]'
      Edit Criteria pop up: '//h5[contains(text(),''Edit Criteria'')]'
      Operator Field: '//df-select[@name=''operator'']'
      Value is required error: '//div[contains(text(),''Value is required'')]'
      Criteria filter: '//td[contains(text(),$criteriaFilter)]'
      1 criteria beside All Recipients: '//span[contains(text(),''1 criteria'')]'
      No Users Found: '//p[contains(text(),''No Users Found'')]'
      Smart Groups Page: '//h1[contains(text(),''Smart Groups'')]'
      Edit Group Details Popup: '//h5[contains(text(),''Edit Group Details'')]'
      Criteria Editor Field: '//h5[contains(text(),''Criteria Editor'')]'
      Delete: '(//af-user-filter-criteria//button[normalize-space(.)=''Delete''])[1]'
      Edit Criteria Popup: '//h5[contains(text(),''Edit Criteria'')]'
      Name (in Field Name dropdown): '//div[@class=''ng-star-inserted'' and contains(text(),''Name'')]'
      name (in Field Name dropdown): '//div[@class=''ng-star-inserted'' and contains(text(),''name'')]'
      Subject (in Field Name dropdown): '//div[@class=''ng-star-inserted'' and contains(text(),''Subject'')]'
      starts with (in Operator dropdown): '//div[contains(text(),''starts with'')]'
      contains (in Operator dropdown): '//div[contains(text(),''contains'')]'
      Value Field: '//input[contains(@id,''df-input'') and @name=''value'']'
      Save Button in Edit Criteria Popup: >-
        //body/ngb-modal-window[3]/div[1]/div[1]/af-criteria-new[1]/div[1]/section[3]/button[1]/span[1]
      Grid with Users Filtered: '//df-card-title[contains(text(),''Users (Filtered by Criteria)'')]'
      Smart Groups in Grid that do not start with the letter 's': >-
        //td[@data-header='Name' and not(starts-with(text(),'S')) and
        not(starts-with(text(),'s'))]
      Smart Groups in Grid that do not start with the letter 'a': >-
        //td[@data-header="Name" and not(starts-with(text(),'a')) and
        not(starts-with(text(),'A'))]
      Save Button in Criteria Editor: '(//button[@type=''submit'' and @class=''df-button''])[2]'
      Save Button in Edit Group Details: '(//button[@type=''submit'' and @class=''df-button''])[1]'
      Criteria with value as- Name starts with 's': '//span[contains(text(),''starts with'')]'
      SmartGroup Created option in EventType Dropdown: '//df-option[div[contains(text(),''SmartGroup Created'')]]'
      SmartGroup Criteria Changed option in EventType Dropdown: '//df-option[div[contains(text(),''SmartGroup Criteria Changed'')]]'
      Criteria with value as - starts with: '//span[contains(text(),''starts with'')]/following-sibling::span'
      Group members' name that do not start with 's': >-
        //td[@data-header="Name" and
        not(normalize-space(starts-with(text(),'S')))]
      Group members' name that do not start with 'a': >-
        //td[@data-header="Name" and
        not(normalize-space(starts-with(text(),'a'))) and
        not(normalize-space(starts-with(text(),'A')))]
      Group members' name that do not start with 'r': >-
        //td[@data-header="Name" and not(starts-with(text(),'r')) and
        not(starts-with(text(),'R'))]
      Group members name that do not start with 'r': >-
        (//td[@data-header="Name" and not(starts-with(text(),'r')) and
        not(starts-with(text(),'R'))])[1]
      Group members name that do not start with 'filteringValue': >-
        (//td[@data-header="Name" and
        not(starts-with(text(),$filteringValueLower)) and
        not(starts-with(text(),$filteringValueUpper))])[1]
      item name in the list that do not contain 'filteringValue': >-
        //td[@data-header="Name" and not(contains(text(),$filteringValueLower))
        and not(contains(text(),$filteringValueUpper))]
      item name in the list that does not start with 'filteringValue': >-
        //td[@data-header="Name" and
        not(starts-with(text(),$filteringValueLower)) and
        not(starts-with(text(),$filteringValueUpper))]
      Criteria value: //af-filter-criterion-view
      Selected user: '//td[contains(text(),''Aamir'')]'
      Add button corresponding to any user: '//td[contains(text(),''Aamir'')]/ancestor::tr/td[6]/button[1]'
      User in Right panel: '//span[contains(text(),''Aamir'')]'
      Green colored User background: '//tr[@class="ng-star-inserted table-success picked gray selected"]'
      Add button corresponding to user: '//td[@data-header=''Name''][text()=Aamir]/following::button[1]'
      Another row added to the right panel with user: '//tr[2]/td[@data-header=''Name'']/span[contains(text(),''Aamir'')]'
      Selected Broadcast group: '//td[contains(text(),''ALL'')]'
      Plus icon for any of the Broadcast group: '//td[contains(text(),''ALL'')]/ancestor::tr/td[5]/button[1]'
      Broadcast Group in right Panel: '//span[contains(text(),''ALL'')]'
      Green colored Broadcast Group background: '//tr[@class="table-success picked gray selected"]'
      Plus icon for selected Broadcast group: '//td[contains(text(),''ALL'')]/ancestor::tr/td[5]/button[1]'
      Another row added to the right panel with Broadcast group: '(//span[contains(text(),''ALL'')])[2]'
      Escalation Group Tab: '//a[normalize-space(text())=''Escalation Group'']'
      Escalation Groups List: '//td[@data-header="Name" and text()=''escalation-group1-with-delay'']'
      Plus icon for any of the escalation Group: >-
        //td[@data-header="Name" and
        text()='escalation-group1-with-delay']/ancestor::tr/td[5]/button[1]
      Escalation group in right panel: '//span[contains(text(),''escalation-group1-with-delay'')]'
      Plus icon for selected escalation Group: >-
        //td[@data-header="Name" and
        text()='escalation-group1-with-delay']/ancestor::tr/td[5]/button[1]
      Green colored Escalation Group background: '//tr[@class="table-success picked gray selected"]'
      Selected Escalation group: '//td[@data-header="Name" and text()=''escalation-group1-with-delay'']'
      Another row added to the right panel with Escalation group: '(//span[contains(text(),''escalation-group1-with-delay'')])[2]'
      Smart Group Tab: '//a[normalize-space(text())=''Smart Group'']'
      Smart group list: '//td[contains(text(),''custom-field-age-equals-5-sg'')]'
      Plus icon for any of the Smart group: >-
        //td[contains(text(),'custom-field-age-equals-5-sg')]/ancestor::tr/td[5]/button[1]
      Smart Group in right panel: '//span[contains(text(),''custom-field-age-equals-5-sg'')]'
      Green colored Smart Group background: '//tr[@class="table-success picked gray selected"]'
      Plus icon for selected Smart group: >-
        //td[contains(text(),'custom-field-age-equals-5-sg')]/ancestor::tr/td[5]/button[1]
      Save Button (at bottom of page): '//span[@class="df-button__content"]/i[@class="fa fa-save"]'
      Selected Smart Group: '//td[contains(text(),''custom-field-age-equals-5-sg'')]'
      Another row added to the right panel with Smart group: '(//span[contains(text(),''custom-field-age-equals-5-sg'')])[2]'
      Added Broadcast group (in 'To' Field): '//div[contains(text(),''ALL'')]'
      Added Escalation group (in 'To' Field): '//div[contains(text(),''escalation-group1-with-delay'')]'
      Added Smart Group (in 'To' Field): '//div[contains(text(),''custom-field-age-equals-5-sg'')]'
      Added User (in 'To' Field): '//div[contains(text(),''Aamir'')]'
      'added User (in ''To'' Field, Compose Notification)': '//div[contains(text(),$UserName)]'
      Total Recipients in 'To' List: '//div[@class="df-chip__content-wrapper"]'
      Any other recipient (other than the 4 added): >-
        //div[@class="df-chip__content-wrapper" and
        not(contains(text(),'Aamir')) and
        not(contains(text(),'custom-field-age-equals-5-sg')) and
        not(contains(text(),'escalation-group1-with-delay')) and
        not(contains(text(),'ALL'))]
      Broadcast Groups Page: '//h1[contains(text(),''Broadcast Groups'')]'
      A random Broadcast Group: '//td[contains(text(),''ALL'')]'
      Broadcast group's members list: '//td[@data-header="Name"]'
      User Tab: '//a[@class="nav-link active" and contains(text(),''Users'')]'
      Users (Under User Tab): '//td[@data-header="Role"]'
      Broadcast Group's members: '(//td[@data-header="Name" and contains(text(),''adminuser1'')])'
      Manage Membership page Users tab: '//a[text()='' Users'']'
      Users (under users tab): '//td[contains(text(),''Aamir'')]'
      First User in List: '//td[contains(text(),''Aamir'')]'
      Another user in list: '//td[contains(text(),''adminuser1-subteam1-team1'')]'
      Yet another user in list: '//td[contains(text(),''adminuser1-subteam1-team2'')]'
      First User in List (now selected): >-
        //tr[contains(@class,'selected')][contains(@class,'ng-star-inserted')][1]
      Group member (in Escalation Groups > Group Members - Right): >-
        //div[contains(@class,'column-container')][not(.//af-user-list)]//table//td[contains(.,$GroupMember)]
      First non-selected user Name cell (in Escalation Groups > Users): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-user-list//tbody//tr[not(contains(@class,'picked'))])[1]//td[contains(@data-header,'Name')]
      First non-selected group Name cell (in Escalation Groups > Broadcast Group): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr[not(contains(@class,'picked'))])[1]//td[contains(@data-header,'Name')]
      First non-selected group Name cell (in Escalation Groups > Escalation Group): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr[not(contains(@class,'picked'))])[1]//td[contains(@data-header,'Name')]
      First non-selected group Name cell (in Escalation Groups > Smart Group): >-
        (//div[contains(@role,'tabpanel')][contains(@aria-expanded,'true')]//af-group-picker//tbody//tr[not(contains(@class,'picked'))])[1]//td[contains(@data-header,'Name')]
      First User in right panel: '//span[contains(text(),''Aamir'')]'
      Other Two Users (now selected with first user at same time): '//tr[@class="ng-star-inserted selected"]'
      Other users selected in right panel: >-
        //span[contains(text(),'adminuser1-subteam1-team1')] |
        //span[contains(text(),'adminuser1-subteam1-team2')]
      Green colour of other selected users Background (in left panel): '//tr[@class="ng-star-inserted table-success picked gray"]'
      U (under User tab) to filter Users: '(//span[@class=''df-button__content'' and contains(text(),''U'')])[1]'
      letter tab (under User tab) to filter Users: '(//af-user-list//button//span[contains(text(),$LetterInTab)])[1]'
      user-0000: '//td[@data-header="Name" and contains(text(),''user-0000'')]'
      user-0002: '//td[@data-header="Name" and contains(text(),''user-0002'')]'
      Selected user-0000: '//tr[./td[contains(text(),''user-0000'')]][contains(@class,''selected'')]'
      Selected user-0001: '//tr[./td[contains(text(),''user-0001'')]][contains(@class,''selected'')]'
      Selected user-0002: '//tr[./td[contains(text(),''user-0002'')]][contains(@class,''selected'')]'
      Selected user-0001 and user-0002: '//tr[@class="ng-star-inserted selected"]'
      Add button corresponding to any of the selected users: '//td[contains(text(),''user-0000'')]/ancestor::tr/td[6]/button[1]'
      user-0000 in right panel: '//span[contains(text(),''user-0000'')]'
      user-0001 in right panel: '//span[contains(text(),''user-0001'')]'
      user-0002 in right panel: '//span[contains(text(),''user-0002'')]'
      Green coloured user-0000 background in left panel: '//tr[@class="ng-star-inserted table-success picked gray selected"]'
      Green coloured user-0001 and user-0002 background in left panel: '//tr[@class="ng-star-inserted table-success picked gray"]'
      Newly added broadcast groups in Grid: '//td[contains(text(),''user-0001'')]'
      first red minus button (-) in left panel (to clear all existing group members): '(//button[@class="px-2 df-button df-button--clear"])[1]'
      OK (in Alert Pop Up): '//body/df-alert[1]/div[3]/div[1]/div[4]/div[1]/button[1]/span[1]'
      Data Management Settings Section: '//h5[contains(text(),''Data Management Settings'')]'
      auto-admt-customer csv file: '//td[contains(text(),''auto-admt-customer.csv'')]'
      autoadmtcustomer map file: '//td[contains(text(),''autoadmtcustomer.map'')]'
      Close button (in Manage ADMT Configuration screen): >-
        //section[@class="modal-footer action-bar"]/button[@class="btn-red
        df-button"]
      Delete Button (in Application Settings Page): '//span[@class="df-button__content"]/i[@class="fa fa-minus-circle"]'
      Delete Confirmation popup: '//p[contains(text(),''Are you sure you want to delete'')]'
      Yes Button Confirmation Popup: '//span[contains(text(),''Yes'')]'
      Second Delete Confirmation Screen: '//p[contains(text(),''Deleting will DESTROY all customer data'')]'
      Answer Field (in Second Delete Confirmation Screen): '//input[@class="form-control ng-pristine ng-valid ng-touched"]'
      Input Field in Delete Customer Confirmation Pop Up: '//input[@value=''NO'']'
      Confirmation message- Customer deletion is scheduled successfully: '//p[contains(text(),''Customer deletion is scheduled successfully.'')]'
      No Configuration files Found (as old configuration file for customer with same name gets deleted when we delete a customer): >-
        //p[contains(text(),'No configuration files found. Please upload
        custom')]
      Restore Backup button (in Data Management Settings Section): '//i[@class="fa fa-undo"]'
      No Backup File found on System (as old backup files too gets deleted when we delete the customer): '//td[contains(text(),''No Backup File found on System'')]'
      team1: '//a[@class="black" and text()=''team1'']'
      plus Icon for team1: '//a[@class="black" and text()=''team1'']/ancestor::tr/td[1]/i[1]'
      Details button (under team1): '//span[contains(text(),''Details'')]'
      Delete button (under team1): '//span[contains(text(),''Delete'')]'
      items per page field (in leaders section): >-
        (//div[contains(@class,'text-truncate ng-star-inserted') and
        not(contains(text(),'team1'))])[1]
      Next Page button in pagination (of leaders section): '//tbody/df-table-paginator[1]/div[1]/div[3]/button[1]/i[1]'
      Leaders in Second page: '(//a[@class="ng-star-inserted" and not(contains(text(),''Global''))])[1]'
      Teams in Left Menu (Under Administration): >-
        //df-sidebar-item[div[a[contains(text(),'Administration')]]]//a[contains(text(),'Teams')]
      Edit User Overview Modal: '//h5[contains(text(),''Edit User Overview'')]'
      Add Username Screen: '//h4[contains(text(),''Add Username'')]'
      Username Input field (in Add Username Screen): '//input[@aria-label="UserName"]'
      New Username (NewUsername): '//td[contains(text(),$NewUsername)]'
      adminuser1-team1@<<customerdomain>>: '//span[contains(text(),''adminuser1-team1@'')]'
      NewUseername@<<customerdomain>>: '//span[contains(text(),$NewUsername)]'
      Team column value for adminuser1-team1: '//td[contains(text(),''adminuser1-team1'')]/ancestor::tr/td[4]/a[1]'
      Setup (Step 1 of 8): '//h5[contains(text(),''Setup (Step 1 of 8)'')]'
      'Yes, import from Aurea EMS Radio Button (as response to- Will Users And Groups Be Imported From An External Data)': '//div[contains(text(),''Yes, import from Aurea EMS'')]'
      4 dot 1+ advanced format (Select Importer Version): '//div[contains(text(),''4.1+ advanced format'')]'
      EMS Server Dropdown: '//df-select[@name="emsServer"]'
      ems-grey-ec2-qa-messageone-com: >-
        //div[@class="ng-star-inserted" and contains(text(),'
        ems.grey.ec2.qa.messageone.com ')]
      Yes (Integrate email devices with EMS): >-
        (//label[contains(text(),'Integrate email devices with
        EMS')]/following::div[contains(text(),'Yes')])[1]
      Use Windows Authentication (Authentication Scheme): '//div[text() = '' Use Windows Authentication '']'
      Use Windows Authentication with EMS (Authentication Scheme): '//*[normalize-space(.)=''Use Windows Authentication with EMS'']//input'
      Yes (Will users and groups be managed via the web?): >-
        (//label[contains(text(),'Will users and groups be managed via the
        web?')]/following::div[contains(text(),'Yes')])[1]
      Yes (Allow customer admin users to import roster files?): >-
        (//label[contains(text(),'Allow customer admin users to import roster
        files?')]/following::div[contains(text(),'Yes')])[1]
      Saved Changes for Lab044: >-
        //div[contains(text(),'Yes, allow editing of users and groups via the
        Web')]
      Login Screen: '//input[@name="username"]'
      Login Error Popup: >-
        //p[contains(text(),'The credentials you provided cannot be determined
        ')]
      Created Regular User (in search results): '//td[contains(text(),$Fullname)]'
      Created Regular User (added to right panel): '//span[contains(text(),$Fullname)]'
      Created Regular User (added to 'To' list of the notification): '//div[contains(text(),$Fullname)]'
      Title field (Add Notification Screen): '//input[@id=''title'']'
      Notification subject in Notifications dialog: '//td[contains(text(),$NotificationSubject)]'
      Already Selected 'Specify a custom device escalation': >-
        //df-radio-input[@class="df-radio-input
        df-radio-input--checked"]//div[contains(text(),'Specify a custom device
        escalation')]
      Alert Console (Notification Template): '(//a[contains(text(),''Notification Template'')])[2]'
      NotificationSubject: '//span[contains(text(),$NotificationSubject)]'
      NotificationSubject2: '//span[contains(text(),$NotificationSubject2)]'
      Send Selected Notification Button: '//button/span[contains(text(),''Send Selected Notification'')]'
      NotificationSubject in one of top two rows: >-
        //tr[1]/td[@aria-label="Subject" and
        contains(text(),$NotificationSubject)] |
        //tr[2]/td[@aria-label="Subject" and
        contains(text(),$NotificationSubject)]
      NotificationSubject in top row: >-
        //tr[1]/td[@aria-label="Subject" and
        contains(text(),$NotificationSubject)]
      NotificationSubject2 in one of top two rows: >-
        //tr[1]/td[@aria-label="Subject" and
        contains(text(),$NotificationSubject2)] |
        //tr[2]/td[@aria-label="Subject" and
        contains(text(),$NotificationSubject2)]
      Response List Screen: >-
        //a[contains(@class,'df-breadcrumbs') and contains(text(),'Response
        List')]
      Field Name Dropdown in Editor Criteria:
        type: dropdown
        open: '//df-select[@name=''criteriaName'']'
        value: '//df-option/div[contains(text(),''{value}'')]'
      Operator Dropdown in Editor Criteria:
        type: dropdown
        open: '//df-select[@name=''operator'']'
        value: '//df-option/div[text()=''{value}'' or contains(text(),''{value}'')]'
      Vaue Dropdown in Editor Criteria:
        type: dropdown
        open: '//df-select[@name=''combo'']'
        value: '//df-option/div[text()=''{value}'' or contains(text(),''{value}'')]'
      Value is required Error Message: '//div[contains(text(),''Value is required'')]'
      Group updated Succefull Message: '//p[normalize-space(text()),''Group updated'']'
      Criteria with Country in list: >-
        //df-card-content//af-filter-criterion-view[strong[text()='COUNTRY'] and
        span[contains(text(),'in list')]]
      Edit Button in Smart Groups Page: '//span[normalize-space(text())=''Edit'']'
      User (as Role under Status): '//label[contains(text(),''Role'')]/following::div[contains(text(),''User'')]'
      Permissions that are not shown with Red X (Permissions with green tick): >-
        //li[@class="ng-star-inserted"]/i[not(@class="fa fa-fw fa-times red
        ng-star-inserted")]
      Edit Icon (Permissions On Team Global screen): >-
        //h5[contains(text(),'Permissions On Team
        Global')]/following::i[@class="fa fa-pencil"]
      Unchecked Manage Access Checkbox: >-
        //df-checkbox[not(contains(@class,'checked'))]/button/label/span[contains(text(),'Manage
        Access')]
      Unchecked Manage Permissions Checkbox: >-
        //df-checkbox[not(contains(@class,'checked'))]/button/label/span[contains(text(),'Manage
        Permissions')]
      Unchecked View Web Reports: >-
        //df-checkbox[not(contains(@class,'checked'))]/button/label/span[contains(text(),'View
        Web Reports')]
      All other Permissions (all checked): '//df-checkbox[contains(@class,''checked'')]'
      Permissions approved (green tick) for Send Notification: >-
        //*[i[contains(@class, 'fa-check')][contains(@class,
        'green')]][contains(text(),'Send Notification')]
      Permissions approved (green tick) for View Results: >-
        //*[i[contains(@class, 'fa-check')][contains(@class,
        'green')]][contains(text(),'View Results')]
      Permissions approved (green tick) for Cancel Notification: >-
        //*[i[contains(@class, 'fa-check')][contains(@class,
        'green')]][contains(text(),'Cancel Notification')]
      Permissions denied (red x) for other Options: '//i[contains(@class, ''fa-times'')][contains(@class, ''red'')]'
      Green plus icon for Global team: '//tr[td/a[contains(text(),''Global'')]]//i[contains(@class,''expand'')]'
      Green tick under 'SN' (Send Notification) for LeaderName in Leaders section: >-
        //a[contains(text(),$LeaderName)]/following::td[@data-header='SN']/i[contains(@class,'fa-check
        green')]
      Green tick under 'VR' (View Results) for LeaderName in Leaders section: >-
        //a[contains(text(),$LeaderName)]/following::td[@data-header='VR']/i[contains(@class,'fa-check
        green')]
      Green tick under 'CN' (Cancel Notification) for LeaderName in Leaders section: >-
        //a[contains(text(),$LeaderName)]/following::td[@data-header='CN']/i[contains(@class,'fa-check
        green')]
      LeaderName (Under Leaders Section): '//a[contains(text(),$LeaderName)]'
      Orange Tick for any of the permissions of LeaderName: >-
        //a[contains(text(),$LeaderName)]/ancestor::tr/td/i[not(normalize-space(contains(@class,'fa-check
        green')))] |
        //a[contains(text(),$LeaderName)]/ancestor::tr/td/i[not(normalize-space(contains(@class,'danger')))]
      Global in Team Dropdown: '//df-option/div[text()=''Global'']'
      Global as Team Value: '//div[contains(text(),''Global'')]'
      Devices Report link in Sidebar: >-
        //df-sidebar-item//df-sidebar-item//a[normalize-space(text())='Devices
        Report']
      Select Report Dropdown: '//df-select[@placeholder="Select device"]'
      All Devices (in select report dropdown): '//df-option/div[contains(text(),''All Devices'')]'
      No Devices (in select report dropdown): '//df-option/div[contains(text(),''No Devices'')]'
      Any Device (in select report dropdown): '//df-option/div[contains(text(),''Any Device'')]'
      Specific Devices (in select report dropdown): '//df-option/div[contains(text(),''Specific Devices'')]'
      LeaderName in Name section of Device Report List: '//a[contains(text(),$LeaderName)]'
      Select Device Dropdown: '//df-select[@name="deviceNames"]'
      Work Email (in Select Device Dropdown): '//df-option/div[contains(text(),''Work Email'')]'
      Is dropdown (select device state dropdown): '//df-select[@placeholder="Select device state"]'
      configured (in Select Device Dropdown): '//df-option/div[text()=''configured'']'
      not configured (in Select Device Dropdown): '//df-option/div[text()=''not configured'']'
      Display Button: '//span[contains(text(),''Display'')]'
      Back to Smart Groups Button: '//span[normalize-space(text())=''Back to Smart Groups'']'
      Smart groups displayed in page: '//td[@data-header="Name"]'
      Smart groups (in Page 2): '(//td[@data-header="Name"])[1]'
      Group members name that do not start with 's': >-
        (//td[@data-header="Name" and not(starts-with(text(),'s')) and
        not(starts-with(text(),'S'))])[1]
      Delete button (in responses): '//button[not(@disabled='''')]//span[contains(.,''Delete'')]'
      No responses message: '//ul[@id="notification-message"]'
      Attachment: '//button[not(@disabled='''')]//span[contains(.,''Attachment'')]'
      Save button on attachment popup: '//af-attachments//span[contains(text(),''Save'')]'
      FirstFileUpload: '//input[@type="file"][1]'
      OK button on confirmation form: '//span[contains(text(),"Ok")]'
      Send button (Enabled): '//button[not(@disabled='''')]//span[contains(text(),''Send'')]'
      Preferred Voice Dropdown:
        type: dropdown
        open: '//df-select[@name=''preferredVoice'']'
        value: '//df-option/div[contains(text(),''{value}'')]'
      Sent message in notification summary: '//af-notification-view/div/section/div[5]/div/div/div'
    name: Criteria
  - selectors:
      Devices Report header: '//h1[normalize-space(.)=''Devices Report'']'
      Device Report List breadcrumb: '//a[normalize-space(.)=''Device Report List'']'
      Paginator bar in the Devices Report List page: //df-table-paginator
      Total records in the Paginator bar: >-
        //div[contains(@class,'df-table-paginator__options__total')]//span[contains(@class,'text-nowrap')][contains(normalize-space(.),'Total')]
      Total Number of records in the Paginator bar: >-
        //div[contains(@class,'df-table-paginator__options__total')]//span[contains(@class,'text-nowrap')][contains(normalize-space(.),'
        : ')]
      Total records in the Paginator: //div[contains(@class,'df-table-paginator__options__total')]
      Leaders Total records in the Paginator bar: >-
        //af-team-leaders//div[contains(@class,'df-table-paginator__options__total')]//span[contains(@class,'text-nowrap')][contains(normalize-space(.),'
        : ')]
      Any User's Expand button in the Devices Report List: >-
        (//table//tr[./td[@data-header='Name'][not(contains(normalize-space(.),'admin'))]]//a[contains(@class,'expandable-icon')])[1]
      Any User's with work email in the Devices Report List: >-
        (//table//td[@data-header='Name'][not(contains(normalize-space(.),'admin'))])[1]
      Work Email field of the Expanded User in the Devices Report List: >-
        //tr[./td[@data-header='Emails'][contains(normalize-space(.),'Work
        Email')]]/td[2]
      Download button in the Devices Report page: '//button[normalize-space(.)=''Download'']'
      <AdminWithWorkEmail> User in the Devices Report List: >-
        //table//tr/td[@data-header='Name'][normalize-space(.)=$AdminWithWorkEmail]
      <AdminWithNoDevice> User in the Devices Report List: >-
        //table//tr/td[@data-header='Name'][normalize-space(.)=$AdminWithNoDevice]
      <AdminWithWorkEmail> local time cell or Next Page button if not found: >-
        (//table//tr[./td[normalize-space(.)=$AdminWithWorkEmail]]/td[@data-header='Local
        Time']|//button[contains(@class,'paginator')][./i[contains(@class,'caret-right')]])[1]
    name: Devices Report List page
  - selectors:
      Dial button: null
      Numeric keypad: null
      Call Connection screen: null
      Call in progress screen is connected: null
      IVR message: null
      Cancel call button: null
    name: Cellphone
  - group: QoS Page
    name: QoS Page
    selectors:
      System uptime Cell: '//td[contains(text(),''System uptime'')]'
      Encryption key expiration Cell: '//td[contains(text(),''Encryption key expiration'')]'
      Encryption key creation Cell: '//td[contains(text(),''Encryption key creation'')]'
